#!/bin/bash

source /opt/crankshaft/crankshaft_default_env.sh
source /opt/crankshaft/crankshaft_system_env.sh
if [ -f /boot/crankshaft/crankshaft_env.sh ];then
    source /boot/crankshaft/crankshaft_env.sh
fi

sudo chmod 666 /tmp/autoapp_helper_command
echo "$@" >> /tmp/autoapp_helper_command

if [ -z $1 ]; then
    echo "got no params" >> /tmp/autoapp_helper_command
    exit 0
fi

IFS="#" read -r -a array <<< "$@"

# set params to system
if [ "${array[0]}" == "setparams" ]; then

    # Start
    echo "-------------------------------------" >> /tmp/autoapp_helper_command
    echo "configure start" >> /tmp/autoapp_helper_command
    sudo touch /tmp/config_in_progress
    sudo touch /tmp/keeprw


    # open filesystems
    crankshaft filesystem boot unlock
    crankshaft filesystem system unlock

    # brightness values
    sudo sed -i 's/^BR_DAY=.*/BR_DAY='$(echo ${array[3]})'/' /boot/crankshaft/crankshaft_env.sh
    sudo sed -i 's/^BR_NIGHT=.*/BR_NIGHT='$(echo ${array[4]})'/' /boot/crankshaft/crankshaft_env.sh

        # enable hotspot
    echo "${array[1]}" >> /tmp/autoapp_helper_command
    sudo sed -i 's/^ENABLE_HOTSPOT=.*/ENABLE_HOTSPOT='$(echo ${array[1]})'/' /boot/crankshaft/crankshaft_env.sh

    # enable bluetooth
    echo "${array[2]}" >> /tmp/autoapp_helper_command
    sudo sed -i 's/^ENABLE_PAIRABLE=.*/ENABLE_PAIRABLE='$(echo ${array[2]})'/' /boot/crankshaft/crankshaft_env.sh

       
    # wifi country
    echo "${array[5]}" >> /tmp/autoapp_helper_command
    sudo sed -i 's/^WIFI_COUNTRY=.*/WIFI_COUNTRY='$(echo ${array[5]})'/' /boot/crankshaft/crankshaft_env.sh

    
    # clean buffers
    sync

    sudo rm /tmp/keeprw

    # close filesystems
    crankshaft filesystem boot lock
    crankshaft filesystem system lock

    # restart gpiotrigger
    sudo systemctl restart gpiotrigger

    # restore brightness if not controlled by lightsensor
    if [ ! -f /etc/cs_lightsensor ]; then
        crankshaft brightness restore
    fi

    # Done
    echo "configure done" >> /tmp/autoapp_helper_command
    echo "-------------------------------------" >> /tmp/autoapp_helper_command
    sudo rm /tmp/config_in_progress
fi

# get params from system

if [ "$1" == "getparams" ]; then

    # Start
    echo "-------------------------------------" >> /tmp/autoapp_helper_command
    echo "get system values start" >> /tmp/autoapp_helper_command

    # get master volume
    pulsedeviceplay=$(cat /etc/pulse/client.conf | grep '^default-sink =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
    levelplay=$(pactl list sinks | grep -A8 $pulsedeviceplay | grep Volume | cut -d/ -f2 | sed 's/%//' | sed 's/ //g')

    # get capture volume
    pulsedevicecap=$(cat /etc/pulse/client.conf | grep '^default-source =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
    if [ ! -z "$pulsedevicecap" ]; then
        levelcap=0
    else
        levelcap=$(pactl list sources | grep -A8 $pulsedevicecap | grep Volume | cut -d/ -f2 | sed 's/%//' | sed 's/ //g')
    fi

    # get disconnect timeout
    remainingdisconnect=$(systemctl list-timers disconnect.timer | grep left | cut -dl -f1  | awk {'print $5 $6'})
    textdisconnect="Stopped"
    if [ ! -z $remainingdisconnect ]; then
        textdisconnect="$remainingdisconnect left"
    fi

    # get shutdown timeout
    remainingshutdown=$(systemctl list-timers shutdown.timer | grep left | cut -dl -f1  | awk {'print $5 $6'})
    textshutdown="Stopped"
    if [ ! -z $remainingshutdown ]; then
        textshutdown="$remainingshutdown left"
    fi

    # create tz listing
    cat /usr/share/zoneinfo/zone1970.tab | grep / | awk {'print $3'} | sort > /tmp/timezone_listing

    # get current dac
    dac=$(cat /boot/config.txt | grep -e 'dtoverlay=allo' -e 'dtoverlay=hifiberry' -e 'dtoverlay=audioinjector' -e 'dtoverlay=iqaudio' | cut -d= -f2 | sed 's/dtoverlay=//')

    # check for onboard if no dac
    if [ -z $dac ]; then
        dac=$(cat /boot/config.txt | grep -e 'dtparam=audio=on' | cut -d= -f2 | sed 's/dtoverlay=//')
    fi

    # create return value string
    sudo rm /tmp/return_value > /dev/null 2>&1
    echo "${levelplay}#${levelcap}#${textshutdown}#${textdisconnect}#${dac}#" > /tmp/return_value
    echo "get system values done" >> /tmp/autoapp_helper_command
    echo "-------------------------------------" >> /tmp/autoapp_helper_command
fi

if [ "$1" == "getoutputs" ]; then
    echo "-------------------------------------" >> /tmp/autoapp_helper_command
    echo "get outputs start" >> /tmp/autoapp_helper_command
    # get outputs
    sudo rm /tmp/get_outputs > /dev/null 2>&1
    # check for pulseaudio dummy output
    nodevice=$(pactl list sinks | grep 'Description: Dummy Output' | sed 's/"//g' | sed 's/\t//g' | sed 's/ //g' | sed 's/://g' | tail -n1)
    if [ -z $nodevice ]; then
        pactl list sinks | grep Name: | grep -v .monitor | grep -v bluez | sed 's/\t//g' | sed 's/Name: //' | while read -r padevice; do
            desc=$(pactl list sinks | grep -A30 'Name: '$padevice | grep alsa.id | sed 's/\t//g' | cut -d= -f2 | sed 's/"//g' | sed 's/^ //' | sed 's/ *$//')
            echo "[$desc] | $padevice"  >> /tmp/get_outputs
        done
        # default output
        sudo rm /tmp/get_default_output > /dev/null 2>&1
        pulsedeviceplay=$(cat /etc/pulse/client.conf | grep '^default-sink =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
        if [ ! -z $pulsedeviceplay ]; then
            defaultplay="$(cat /tmp/get_outputs | grep "$pulsedeviceplay")"
            if [ "$defaultplay" != "" ]; then
                echo "$defaultplay" > /tmp/get_default_output
            else
                echo "not selected" > /tmp/get_default_output
                echo "not selected" >> /tmp/get_outputs
            fi
        fi
    else
        echo "No audio output hardware detected!" > /tmp/get_outputs
        echo "No audio output hardware detected!" > /tmp/get_default_output
    fi
    echo "get outputs done" >> /tmp/autoapp_helper_command
    echo "-------------------------------------" >> /tmp/autoapp_helper_command
fi

if [ "$1" == "getinputs" ]; then
    echo "-------------------------------------" >> /tmp/autoapp_helper_command
    echo "get outputs start" >> /tmp/autoapp_helper_command
    # get inputs
    sudo rm /tmp/get_inputs > /dev/null 2>&1
    # check in put device available
    nodevice=$(arecord -l | sed 's/"//g' | sed 's/\t//g' | sed 's/ //g' | sed 's/://g' | tail -n1)
    if [ ! -z $nodevice ]; then
        pactl list sources | grep Name: | grep -v .monitor | grep -v bluez | sed 's/\t//g' | sed 's/Name: //' | while read -r padevice; do
            desc=$(pactl list sources | grep -A30 'Name: '$padevice | grep alsa.id | sed 's/\t//g' | cut -d= -f2 | sed 's/"//g' | sed 's/^ //' | sed 's/ *$//')
            echo "[$desc] | $padevice" >> /tmp/get_inputs
        done
        # default input
        sudo rm /tmp/get_default_input > /dev/null 2>&1
        pulsedevicecap=$(cat /etc/pulse/client.conf | grep '^default-source =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
        if [ ! -z $pulsedevicecap ]; then
            defaultcap="$(cat /tmp/get_inputs | grep "$pulsedevicecap")"
            if [ "$defaultcap" != "" ]; then
                echo "$defaultcap" > /tmp/get_default_input
            else
                echo "not selected" > /tmp/get_default_input
                echo "not selected" >> /tmp/get_inputs
            fi
        fi
    else
        echo "No audio input hardware detected!" > /tmp/get_inputs
        echo "No audio input hardware detected!" > /tmp/get_default_input
    fi
    echo "get inputs done" >> /tmp/autoapp_helper_command
    echo "-------------------------------------" >> /tmp/autoapp_helper_command
fi

if [ "$1" == "restorevolumes" ]; then
    # set playback volume
    pulsedeviceplay=$(cat /etc/pulse/client.conf | grep '^default-sink =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
    if [ ! -z $pulsedeviceplay ]; then
        # unmute
        pactl set-sink-mute $pulsedeviceplay 0
        # set volume
        if [ -f /boot/crankshaft/volume ]; then
            volume=$(cat /boot/crankshaft/volume)
            # check min volume
            if [ $volume -lt ${STARTUP_VOL_MIN} ];then
                volume=${STARTUP_VOL_MIN}
            fi
            # check max volume
            if [ $volume -gt ${STARTUP_VOL_MAX} ];then
                volume=${STARTUP_VOL_MAX}
            fi
            pactl set-sink-volume $pulsedeviceplay $volume%
            echo "$volume" > /tmp/play_volume
        else
            pactl set-sink-volume $pulsedeviceplay 50%
            echo "50" > /tmp/play_volume
        fi
    fi

    # set capture volume
    pulsedevicecap=$(cat /etc/pulse/client.conf | grep '^default-source =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
    if [ ! -z $pulsedevicecap ]; then
        # unmute
        pactl set-source-mute $pulsedevicecap 0
        # set volume
        if [ -f /boot/crankshaft/capvolume ]; then
            capvolume=$(cat /boot/crankshaft/capvolume)
            # check min volume
            if [ $capvolume -lt ${STARTUP_VOL_MIN} ];then
                capvolume=${STARTUP_VOL_MIN}
            fi
            # check max volume
            if [ $capvolume -gt ${STARTUP_VOL_MAX} ];then
                capvolume=${STARTUP_VOL_MAX}
            fi
            pactl set-source-volume $pulsedevicecap $capvolume%
        else
            pactl set-source-volume $pulsedevicecap 50%
        fi
    fi
fi

if [ "$1" == "getbrightnessvalues" ]; then
    if [ ! -z $CUSTOM_BRIGHTNESS_COMMAND ]; then
        CUSTOM=1
    else
        CUSTOM=0
    fi
    sudo rm /tmp/br_values > /dev/null 2>&1
    echo "$BR_MIN#$BR_MAX#$BR_STEP#$BR_DAY#$BR_NIGHT#$CUSTOM#" > /tmp/br_values
    sudo rm /tmp/tsl2561_values > /dev/null 2>&1
    echo "$LUX_LEVEL_1#$DISP_BRIGHTNESS_1#$LUX_LEVEL_2#$DISP_BRIGHTNESS_2#$LUX_LEVEL_3#$DISP_BRIGHTNESS_3#$LUX_LEVEL_4#$DISP_BRIGHTNESS_4#$LUX_LEVEL_5#$DISP_BRIGHTNESS_5#$TSL2561_CHECK_INTERVAL#$TSL2561_DAYNIGHT_ON_STEP#" > /tmp/tsl2561_values
fi

if [ "$1" == "getvolume" ]; then
    # get soundcard volume
    pulsedeviceplay=$(cat /etc/pulse/client.conf | grep '^default-sink =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
    levelplay=$(pactl list sinks | grep -A8 $pulsedeviceplay | grep Volume | cut -d/ -f2 | sed 's/%//' | sed 's/ //g')
    echo "$levelplay" > /tmp/get_volume_device
fi

if [ "$1" == "setvolume" ]; then
    # set soundcard volume
    pulsedeviceplay=$(cat /etc/pulse/client.conf | grep '^default-sink =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
    pactl set-sink-volume $pulsedeviceplay $2%
fi

if [ "$1" == "setmute" ]; then
    # mute soundcard
    pulsedeviceplay=$(cat /etc/pulse/client.conf | grep '^default-sink =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
    pactl set-sink-mute $pulsedeviceplay 1
fi

if [ "$1" == "setunmute" ]; then
    # unmute soundcard
    pulsedeviceplay=$(cat /etc/pulse/client.conf | grep '^default-sink =' | cut -d= -f2 | sed 's/\t//g' | sed 's/^ //' | sed 's/ *$//')
    pactl set-sink-mute $pulsedeviceplay 0
fi

if [ "${array[0]}" == "settime" ]; then
    hour="${array[1]}"
    minute="${array[2]}"
    if [ ${#hour} -lt 2 ]; then
        hour="0$hour"
    fi
    if [ ${#minute} -lt 2 ]; then
        minute="0$minute"
    fi
    echo "$hour $minute" >> /tmp/autoapp_helper_command
    crankshaft filesystem system unlock
    sudo timedatectl set-ntp 0 # disable sync to allow manual setting
    sudo timedatectl set-time "$hour:$minute:00" >> /tmp/autoapp_helper_command
    sudo hwclock --systohc
    sudo timedatectl set-ntp 1 # reenable sync
    crankshaft filesystem system lock
fi

if [ "$1" == "updaterecent" ] && [ -f /tmp/dnsmasq.leases ]; then
    num=0
    sudo sh -c 'echo "[Recent]" > /tmp/openauto_wifi_recent.ini'
    sudo sh -c 'echo "EntiresCount=0" >> /tmp/openauto_wifi_recent.ini'
    sudo sh -c 'echo "" > /tmp/temp_recent_list'
    cat /tmp/dnsmasq.leases | awk {'print $3'} | while read -r wificlient; do
        sudo sh -c 'echo "Entry_$num='$wificlient'" >> /tmp/openauto_wifi_recent.ini'
        if [ "$wificlient" != "" ]; then
            log_echo "IP added to recent list: $wificlient"
            sudo sh -c 'echo "'$wificlient'" >> /tmp/temp_recent_list'
        fi
        num=$((num+1))
    done
    entries=$(cat /tmp/openauto_wifi_recent.ini | grep Entry_ | wc -l)
    sed -i 's|^EntiresCount=.*|EntiresCount='"$entries"'|' /tmp/openauto_wifi_recent.ini
    sudo chmod 666 /tmp/openauto_wifi_recent.ini
fi

if [ "$1" == "cleansymlinks" ]; then
    log_echo "LINK: Check for dead links caused by removed device"
    find /media/MYMEDIA/. -type l -exec sh -c 'readlink -f "{}" 1>/dev/null || sudo rm "{}"' -- "{}" \;
fi

if [ "$1" == "addsymlinks" ] && [ "$2" != "" ]; then
    log_echo "LINK: Check for media folder on $2"
    # grab music folder name ignoring case sensitive
    MEDIAFOLDER=$(basename $(ls /media/USBDRIVES/$2 | grep -i '^music$'))
    if [ "$MEDIAFOLDER" != "" ]; then
        log_echo "LINK: Found media folder: $MEDIAFOLDER"
        ln -s /media/USBDRIVES/$2/$MEDIAFOLDER/*/ /media/MYMEDIA/
        find /media/MYMEDIA/. -type l -exec sh -c 'readlink -f "{}" 1>/dev/null || sudo rm "{}"' -- "{}" \;
        log_echo "LINK: media folder linked"
    fi
fi

if [ "$1" == "usbreset" ] && [ -f /tmp/android_device ]; then
    sudo usbreset $(cat /tmp/android_device | head -n1) > /dev/null 2>&1
    sleep 2
    # check if device still in aa mode
    log_echo "USBRESET: Check if usb reset was successfull..."
    CHECK=`lsusb | grep 'Google' | grep 'accessory mode' | awk {'print $2"/"$4'} | cut -d: -f1`
    if [ "$CHECK" != "" ]; then
        log_echo "USBRESET: Reset failed (/dev/bus/usb/$CHECK)!"
        sudo usbreset /dev/bus/usb/$CHECK
        log_echo "USBRESET: Retried!"
        sleep 1
        sudo udevadm control --reload-rules && sudo udevadm trigger
    else
        log_echo "USBRESET: ok."
    fi
fi

exit 0
