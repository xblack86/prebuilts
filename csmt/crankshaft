#!/bin/bash

version=0.1

source /opt/crankshaft/crankshaft_default_env.sh
source /opt/crankshaft/crankshaft_system_env.sh

# FS functions default mode - ignored on dev mode
function cs_bootrw () {
    if [ ! -f /tmp/dev_mode_enabled ] ; then
	sudo mount -o remount,rw /boot
    fi
}
function cs_bootro() {
    if [ ! -f /tmp/dev_mode_enabled ] && [ ! -f /tmp/keeprw ] ; then
	sudo mount -o remount,ro /boot
    fi
}
function cs_systemrw() {
    if [ ! -f /tmp/dev_mode_enabled ] ; then
	sudo mount -o remount,rw /
    fi
}
function cs_systemro() {
    if [ ! -f /tmp/dev_mode_enabled ] && [ ! -f /tmp/keeprw ] ; then
	sudo mount -o remount,ro /
    fi
}

function start_trigger() {
    echo "#!/bin/bash" > /tmp/download_trigger
    echo "" >> /tmp/download_trigger
    echo "while [ ! -f /tmp/system_update_ready ]; do" >> /tmp/download_trigger
    echo "    touch /tmp/tic" >> /tmp/download_trigger
    echo "    sleep 1" >> /tmp/download_trigger
    echo "    rm /tmp/tic" >> /tmp/download_trigger
    echo "    sleep 1" >> /tmp/download_trigger
    echo "done" >> /tmp/download_trigger
    sudo chmod 777 /tmp/download_trigger
    /tmp/download_trigger &
}


# RTC functions
function cs_rtc() {
    sudo sed -i '/./,/^$/!d' /boot/config.txt
    sudo sed -i 's/^# RTC Setup.*//' /boot/config.txt
    sudo sed -i '/dtoverlay=i2c-rtc/d' /boot/config.txt
    sudo sed -i '/rtc/d' /etc/modules
    sudo sed -i '/./,/^$/!d' /boot/config.txt
    sudo sed -i '/./,/^$/!d' /etc/modules
    sudo sh -c "echo 'rtc-'$1 >> /etc/modules"
    sudo sh -c "echo '' >> /boot/config.txt"
    sudo sh -c "echo '# RTC Setup' >> /boot/config.txt"
    sudo sh -c "echo 'dtoverlay=i2c-rtc,'$1 >> /boot/config.txt"
    sudo sed -i 's/^RTC_DAYNIGHT=.*/RTC_DAYNIGHT=1/' /boot/crankshaft/crankshaft_env.sh
    sudo systemctl enable hwclock-load.service >/dev/null 2>&1
    sudo systemctl daemon-reload
    echo $2
    if [ ! -z $2 ]; then
	sudo timedatectl set-timezone "$2"
    else
	sudo timedatectl set-timezone "$(cat /etc/timezone)"
    fi
    cs_check_i2c
}

function cs_timezone() {
    echo $1
    if [ ! -z $1 ]; then
	sudo timedatectl set-timezone "$1"
    else
	sudo timedatectl set-timezone "$(cat /etc/timezone)"
    fi
}

function cs_check_i2c() {
    cs_systemrw
    sudo sed -i '/./,/^$/!d' /boot/config.txt
    sudo sed -i '/dtparam=i2c_arm=/d' /boot/config.txt
    sudo sed -i 's/^# I2C Bus.*//' /boot/config.txt
    sudo sed -i '/i2c*/d' /etc/modules
    sudo sed -i '/./,/^$/!d' /boot/config.txt
    sudo sed -i '/./,/^$/!d' /etc/modules
    sudo sh -c "echo '' >> /boot/config.txt"
    sudo sh -c "echo '# I2C Bus' >> /boot/config.txt"
    sudo sh -c "echo 'dtparam=i2c_arm=on' >> /boot/config.txt"
    sudo sh -c "echo 'i2c-dev' >> /etc/modules"
    cs_systemro
}

function cs_clear_screen_header() {
    PPIDCHECK=$(ps $PPID | tail -1 | awk '{print $6}')
    if [[ ! $SHLVL -gt 2 ]] && [ -z $PPIDCHECK ]; then
	clear
	cs_echo "${MAGENTA}${BOLD}Crankshaft-CONDOR Management Tool v$version is executing command...${RESET}"
	cs_echo ""
    fi
}

function cs_clear_bluetooth() {
    # Remove all previous paired devices
    list=""
    bt-device -l | grep -E -o '[[:xdigit:]]{2}(:[[:xdigit:]]{2}){5}' | while read line
    do
	echo -e 'disconnect '$line'\nquit' | bluetoothctl > /dev/null 2>&1
	echo -e 'remove '$line'\nquit' | bluetoothctl > /dev/null 2>&1
    done
}

function cs_bluetooth_pairable() {
    sudo bt-adapter --set Powered 1
    sudo bt-adapter --set Discoverable 1
    sudo bt-adapter --set DiscoverableTimeout 0
    sudo bt-adapter --set Pairable 1
    sudo bt-adapter --set PairableTimeout 120
    touch /tmp/enable_pairing >/dev/null 2>&1
    touch /tmp/bluetooth_pairable >/dev/null 2>&1
    sleep 120 && sudo rm /tmp/bluetooth_pairable &
    sleep 2 && sudo rm /tmp/enable_pairing &
}

function cs_pi_power() {
	for id in core sdram_c sdram_i sdram_p ; do \
	echo -e "$id:\t$(vcgencmd measure_volts $id)" ; \
	done
	vcgencmd measure_clock arm; vcgencmd measure_clock core; vcgencmd measure_temp; vcgencmd get_throttled; vcgencmd measure_volts core; vcgencmd measure_volts 2711;
}

# echo if user logged in
function cs_echo() {
    PPIDCHECK=$(ps $PPID | tail -1 | awk '{print $6}')
    if [[ ! $SHLVL -gt 2 ]] && [ -z $PPIDCHECK ]; then
	echo $1
    else
	logger "CSMT-LOGGER: --------------------------------------------------------------------"
	logger "CSMT-LOGGER: $1"
	logger "CSMT-LOGGER: --------------------------------------------------------------------"
    fi
}

function cs_noecho() {
    PPIDCHECK=$(ps $PPID | tail -1 | awk '{print $6}')
    if [[ ! $SHLVL -gt 2 ]] && [ -z $PPIDCHECK ]; then
	echo $1
    fi
}

# Abort if file does not exist

if [ ! -z $1 ]; then
    declare -a array=('brightness' 'filesystem' 'system' 'boot' 'timers' 'settings' 'services' 'branch' 'update' 'rtc' 'timezone' 'state' 'reset' 'resize' 'usb' 'hotspot' 'syslog' 'bluetooth' 'temp' 'mode' 'initramfs' 'oalog' 'debuglog' 'i2ccheck' 'network' 'resizebg' 'systemcheck' 'version')
    if [[ ! "${array[@]}" =~ "$1" ]]; then
	cs_echo "Unknown command:"
	cs_echo "${YELLOW}${BOLD}Syntax: crankshaft brightness|filesystem|system|boot|timers|settings|services|update|rtc|timezone|state|reset|resize|usb|hotspot|syslog|bluetooth|temp|mode|initramfs|oalog|debuglog|i2ccheck|network|resizebg|cover|systemcheck|version${RESET}"
	exit 0
    fi

    cs_clear_screen_header

    # brightness
    if [ $1 == "brightness" ]; then
        case $2 in
	    save)
		if [ -f ${BRIGHTNESS_FILE} ] || [ -f /tmp/custombrightness ]; then
		    cs_bootrw
                    if [ -f /tmp/night_mode_enabled ]; then
			if [ ! -z ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
			    sudo sed -i 's/BR_NIGHT=.*/BR_NIGHT='$(cat /tmp/custombrightness)'/' /boot/crankshaft/crankshaft_env.sh
			    cs_echo "Custom Brightness Level Night Saved"
			else
			    sudo sed -i 's/BR_NIGHT=.*/BR_NIGHT='$(cat ${BRIGHTNESS_FILE})'/' /boot/crankshaft/crankshaft_env.sh
			    cs_echo "Brightness Level Night Saved"
			fi
                    else
			if [ ! -z ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
			    sudo sed -i 's/BR_DAY=.*/BR_DAY='$(cat /tmp/custombrightness)'/' /boot/crankshaft/crankshaft_env.sh
			    cs_echo "Custom Brightness Level Day Saved"
			else
			    sudo sed -i 's/BR_DAY=.*/BR_DAY='$(cat ${BRIGHTNESS_FILE})'/' /boot/crankshaft/crankshaft_env.sh
			    cs_echo "Brightness Level Day Saved"
			fi
		    fi
		    cs_bootro
		else
		    cs_echo "No device brightness file present"
		fi
		;;
	    restore)
		if [ -f ${BRIGHTNESS_FILE} ] || [ ! -z ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
		    if [ -f /tmp/night_mode_enabled ]; then
			if [ ! -z ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
			    echo ${BR_NIGHT} > /tmp/custombrightness
			    sudo chmod 666 /tmp/custombrightness
			    if [ -f ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
			        ${CUSTOM_BRIGHTNESS_COMMAND} $(cat /tmp/custombrightness)
			    else
			        cs_echo "Custom Brightness Command is missing!"
			    fi
			    cs_echo "Custom Brightness Level Night Restored"
			else
			    LVL=`cat ${BRIGHTNESS_FILE}`
			    cs_echo "Start Restore Brightness Level Night - Current: ${LVL}"
			    if [ ${BR_NIGHT} -lt ${LVL} ]; then
			        while [ ${LVL} -gt ${BR_NIGHT} ];do
				    LVL=$((${LVL}-1))
				    echo ${LVL} > ${BRIGHTNESS_FILE}
				    sleep 0.005
				done
			    elif [ ${BR_NIGHT} -gt ${LVL} ]; then
				while [ ${LVL} -lt ${BR_NIGHT} ];do
				    LVL=$((${LVL}+1))
				    echo ${LVL} > ${BRIGHTNESS_FILE}
				    sleep 0.005
				done
			    fi
			    cs_echo "Brightness Level Night Restored: ${LVL}"
			fi
                    else
			if [ ! -z ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
			    echo ${BR_DAY} > /tmp/custombrightness
			    sudo chmod 666 /tmp/custombrightness
			    if [ -f ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
				${CUSTOM_BRIGHTNESS_COMMAND} $(cat /tmp/custombrightness)
			    else
				cs_echo "Custom Brightness Command is missing!"
			    fi
			    cs_echo "Custom Brightness Level Day Restored"
			else
			    LVL=`cat ${BRIGHTNESS_FILE}`
			    cs_echo "Start Restore Brightness Level Day - Current: ${LVL}"
			    if [ ${BR_DAY} -lt ${LVL} ]; then
			        while [ ${LVL} -gt ${BR_DAY} ];do
				    LVL=$((${LVL}-1))
				    echo ${LVL} > ${BRIGHTNESS_FILE}
				    sleep 0.005
				done
			    elif [ ${BR_DAY} -gt ${LVL} ]; then
				while [ ${LVL} -lt ${BR_DAY} ];do
				    LVL=$((${LVL}+1))
				    echo ${LVL} > ${BRIGHTNESS_FILE}
				    sleep 0.005
				done
			    fi
			    cs_echo "Brightness Level Day Restored: ${LVL}"
			fi
                    fi
		else
		    cs_echo "No device brightness file present"
		fi
		;;
	    up)
		if [ ! -z ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
		    LVL=`cat /tmp/custombrightness`
		    if [ -z ${LVL} ]; then
			LVL=${BR_MAX}
		    fi
		    if [ $((${LVL} + ${BR_STEP})) -le ${BR_MAX} ]; then
			echo $((${LVL} + ${BR_STEP})) > /tmp/custombrightness
			if [ -f ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
			    ${CUSTOM_BRIGHTNESS_COMMAND} $(cat /tmp/custombrightness)
			else
			    cs_echo "Custom Brightness Command is missing!"
			fi
			cs_echo "Custom Brightness Level Increased To: $((${LVL} + ${BR_STEP}))"
		    fi
		elif [ -f ${BRIGHTNESS_FILE} ]; then
		    LVL=`cat ${BRIGHTNESS_FILE}`
		    if [ -z ${LVL} ]; then
			LVL=${BR_MAX}
		    fi
		    if [ $((${LVL} + ${BR_STEP})) -le ${BR_MAX} ]; then
			echo $((${LVL} + ${BR_STEP})) > ${BRIGHTNESS_FILE}
			cs_echo "Brightness Level Increased To: $((${LVL} + ${BR_STEP}))"
		    fi
		else
    		    cs_echo "No device brightness file present"
		fi
		;;
	    down)
		if [ ! -z ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
		    LVL=`cat /tmp/custombrightness`
		    if [ -z ${LVL} ]; then
			LVL=${BR_MAX}
		    fi
		    if [ $((${LVL} - ${BR_STEP})) -ge ${BR_MIN} ]; then
			echo $((${LVL} - ${BR_STEP})) > /tmp/custombrightness
			if [ -f ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
			    ${CUSTOM_BRIGHTNESS_COMMAND} $(cat /tmp/custombrightness)
			else
			    cs_echo "Custom Brightness Command is missing!"
			fi
			cs_echo "Custom Brightness Level Reduced To: $((${LVL} + ${BR_STEP}))"
		    fi
		elif [ -f ${BRIGHTNESS_FILE} ]; then
		    LVL=`cat ${BRIGHTNESS_FILE}`
		    if [ -z ${LVL} ]; then
			LVL=${BR_MAX}
		    fi
		    if [ $((${LVL} - ${BR_STEP})) -ge ${BR_MIN} ]; then
			echo $((${LVL} - ${BR_STEP})) > ${BRIGHTNESS_FILE}
			cs_echo "Brightness Level Reduced To: $((${LVL} + ${BR_STEP}))"
		    fi
		else
    		    cs_echo "No device brightness file present"
		fi
		;;
	    min)
		if [ ! -z ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
		    echo ${BR_MIN} > /tmp/custombrightness
		    if [ -f ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
			${CUSTOM_BRIGHTNESS_COMMAND} $(cat /tmp/custombrightness)
		    else
			cs_echo "Custom Brightness Command is missing!"
		    fi
		    cs_echo "Custom Brightness Level Set To Min: ${BR_MIN}"
		elif [ -f ${BRIGHTNESS_FILE} ]; then
		    LVL=`cat ${BRIGHTNESS_FILE}`
		    if [ ${BR_MIN} -lt ${LVL} ]; then
		        while [ ${LVL} -gt ${BR_MIN} ];do
			    LVL=$((${LVL}-1))
			    echo ${LVL} > ${BRIGHTNESS_FILE}
			    sleep 0.005
			done
		    elif [ ${BR_MIN} -gt ${LVL} ]; then
			while [ ${LVL} -lt ${BR_MIN} ];do
			    LVL=$((${LVL}+1))
			    echo ${LVL} > ${BRIGHTNESS_FILE}
			    sleep 0.005
			done
		    fi
		    cs_echo "Brightness Level Set To Min: ${BR_MIN}"
		else
		    cs_echo "No device brightness file present"
		fi
		;;
	    max)
		if [ ! -z ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
		    echo ${BR_MAX} > /tmp/custombrightness
		    if [ -f ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
			${CUSTOM_BRIGHTNESS_COMMAND} $(cat /tmp/custombrightness)
		    else
			cs_echo "Custom Brightness Command is missing!"
		    fi
		    cs_echo "Custom Brightness Level Set To Max: ${BR_MAX}"
		elif [ -f ${BRIGHTNESS_FILE} ]; then
		    LVL=`cat ${BRIGHTNESS_FILE}`
		    if [ ${BR_MAX} -lt ${LVL} ]; then
		        while [ ${LVL} -gt ${BR_MAX} ];do
			    LVL=$((${LVL}-1))
			    echo ${LVL} > ${BRIGHTNESS_FILE}
			    sleep 0.005
			done
		    elif [ ${BR_MAX} -gt ${LVL} ]; then
			while [ ${LVL} -lt ${BR_MAX} ];do
			    LVL=$((${LVL}+1))
			    echo ${LVL} > ${BRIGHTNESS_FILE}
			    sleep 0.005
			done
		    fi
		    cs_echo "Brightness Level Set To Max: ${BR_MAX}"
		else
		    cs_echo "No device brightness file present"
		fi
		;;
	    get)
		if [ ! -z $3 ]; then
		    if [ $3 == "location" ]; then
			if [ ! -z ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
			    echo "/tmp/custombrightness"
			else
			    echo ${BRIGHTNESS_FILE}
			fi
		    elif [ $3 == "level" ]; then
			if [ ! -z ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
			    LVL=`cat /tmp/custombrightness`
			    cs_echo "Custom current Brightness Level: $LVL"
			elif [ -f ${BRIGHTNESS_FILE} ]; then
			    # get current brightness level
			    LVL=`cat ${BRIGHTNESS_FILE}`
			    cs_echo "Current Brightness Level: $LVL"
			else
    			    cs_echo "No device brightness file present"
			fi
		    else
			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft brightness get location|level${RESET}"
		    fi
		else
		    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft brightness get location|level${RESET}"
		fi
		;;
	    set)
		if [ ! -z $3 ]; then
		    if [ ! -z ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
			echo $3 > /tmp/custombrightness
			if [ -f ${CUSTOM_BRIGHTNESS_COMMAND} ]; then
			    ${CUSTOM_BRIGHTNESS_COMMAND} $(cat /tmp/custombrightness)
			else
			    cs_echo "Custom Brightness Command is missing!"
			fi
			cs_echo "Custom Brightness Level Set To: $3"
		    elif [ -f ${BRIGHTNESS_FILE} ]; then
			LVL=`cat ${BRIGHTNESS_FILE}`
			if [ $3 -lt ${LVL} ]; then
			    while [ ${LVL} -gt $3 ];do
				LVL=$((${LVL}-1))
				echo ${LVL} > ${BRIGHTNESS_FILE}
				sleep 0.005
			    done
			elif [ $3 -gt ${LVL} ]; then
			    while [ ${LVL} -lt $3 ];do
				LVL=$((${LVL}+1))
				echo ${LVL} > ${BRIGHTNESS_FILE}
				sleep 0.005
			    done
			fi
			cs_echo "Brightness Level Set To: $3"
		    else
			cs_echo "No device brightness file present"
		    fi
		fi
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft brightness save|restore|up|down|min|max|set|get${RESET}"
		;;
	esac
    fi

    # filesystem
    if [ $1 == "filesystem" ]; then
	case $2 in
	    system)
		if [ ! -z $3 ]; then
		    if [ $3 == "unlock" ]; then
			cs_echo "Reqeust: unlock system"
			if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/root " | awk '{print $1}') ]; then
			    cs_echo "Before: read-only"
			else
			    cs_echo "Before: read-write"
			fi
			cs_systemrw
			if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/root " | awk '{print $1}') ]; then
			    cs_echo "After : read-only"
			else
			    cs_echo "After : read-write"
			fi
		    elif [ $3 == "lock" ]; then
			cs_echo "Reqeust: lock system"
			if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/root " | awk '{print $1}') ]; then
			    cs_echo "Before: read-only"
			else
			    cs_echo "Before: read-write"
			fi
			cs_systemro
			if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/root " | awk '{print $1}') ]; then
			    cs_echo "After : read-only"
			else
			    cs_echo "After : read-write"
			fi
		    else
			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft filesystem system lock|unlock|check${RESET}"
		    fi
		else
		    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft filesystem system lock|unlock${RESET}"
		fi
		;;
	    boot)
		if [ ! -z $3 ]; then
		    if [ $3 == "unlock" ]; then
			cs_echo "Reqeust: unlock boot"
			if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/mmcblk0p1 " | awk '{print $1}') ]; then
			    cs_echo "Before: read-only"
			else
			    cs_echo "Before: read-write"
			fi
			cs_bootrw
			if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/mmcblk0p1 " | awk '{print $1}') ]; then
			    cs_echo "After : read-only"
			else
			    cs_echo "After : read-write"
			fi
		    elif [ $3 == "lock" ]; then
			cs_echo "Reqeust: lock boot"
			if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/mmcblk0p1 " | awk '{print $1}') ]; then
			    cs_echo "Before: read-only"
			else
			    cs_echo "Before: read-write"
			fi
			cs_bootro
			if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/mmcblk0p1 " | awk '{print $1}') ]; then
			    cs_echo "After : read-only"
			else
			    cs_echo "After : read-write"
			fi
		    elif [ $3 == "check" ]; then
			sudo umount /dev/mmcblk0p1
			if [ ! $(cat /proc/mounts | grep "/dev/mmcblk0p1 " | awk '{print $1}') ]; then
			    sudo fsck -f -y /dev/mmcblk0p1
			    sudo mount /dev/mmcblk0p1 /boot
			else
			    cs_echo "Sorry! The drive can't be unmounted. Abort."
			    cs_echo ""
			fi
		    else
			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft filesystem boot lock|unlock|check${RESET}"
		    fi
		else
		    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft filesystem boot lock|unlock|check${RESET}"
		fi
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft filesystem system|boot${RESET}"
		;;
	esac
    fi

    # system
    if [ $1 == "system" ]; then
	case $2 in
	    unlock)
		cs_echo "Reqeust: unlock system"
		if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/root " | awk '{print $1}') ]; then
		    cs_echo "Before: read-only"
		else
		    cs_echo "Before: read-write"
		fi
		cs_systemrw
		if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/root " | awk '{print $1}') ]; then
		    cs_echo "After : read-only"
		else
		    cs_echo "After : read-write"
		fi
		;;
	    lock)
		cs_echo "Reqeust: lock system"
		if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/root " | awk '{print $1}') ]; then
		    cs_echo "Before: read-only"
		else
		    cs_echo "Before: read-write"
		fi
		cs_systemro
		if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/root " | awk '{print $1}') ]; then
		    cs_echo "After : read-only"
		else
		    cs_echo "After : read-write"
		fi
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft system lock|unlock${RESET}"
		;;
	esac
    fi

    # mode
    if [ $1 == "mode" ]; then
	case $2 in
	    default)
		cs_echo "System mode changed: default"
		cs_bootrw
		sudo sed -i 's/^DEV_MODE=.*/DEV_MODE=0/' /boot/crankshaft/crankshaft_env.sh
		sudo sed -i 's/^DEBUG_MODE=.*/DEBUG_MODE=0/' /boot/crankshaft/crankshaft_env.sh
		cs_bootro
		;;
	    dev)
		cs_echo "System mode changed: dev"
		cs_bootrw
		sudo sed -i 's/^DEV_MODE=.*/DEV_MODE=1/' /boot/crankshaft/crankshaft_env.sh
		sudo sed -i 's/^DEV_MODE_APP=.*/DEV_MODE_APP=0/' /boot/crankshaft/crankshaft_env.sh
		cs_bootro
		;;
	    devapp)
		cs_echo "System mode changed: devapp"
		cs_bootrw
		sudo sed -i 's/^DEV_MODE=.*/DEV_MODE=1/' /boot/crankshaft/crankshaft_env.sh
		sudo sed -i 's/^DEV_MODE_APP=.*/DEV_MODE_APP=1/' /boot/crankshaft/crankshaft_env.sh
		cs_bootro
		;;
	    debug)
		cs_echo "System mode changed: debug"
		cs_bootrw
		sudo sed -i 's/^DEBUG_MODE=.*/DEBUG_MODE=1/' /boot/crankshaft/crankshaft_env.sh
		cs_bootro
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft mode default|dev|debug${RESET}"
		;;
	esac
    fi

    # boot
    if [ $1 == "boot" ]; then
	case $2 in
	    unlock)
		cs_echo "Reqeust: unlock boot"
		if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/mmcblk0p1 " | awk '{print $1}') ]; then
		    cs_echo "Before: read-only"
		else
		    cs_echo "Before: read-write"
		fi
		cs_bootrw
		if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/mmcblk0p1 " | awk '{print $1}') ]; then
		    cs_echo "After : read-only"
		else
		    cs_echo "After : read-write"
		fi
		;;
	    lock)
		cs_echo "Reqeust: lock boot"
		if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/mmcblk0p1 " | awk '{print $1}') ]; then
		    cs_echo "Before: read-only"
		else
		    cs_echo "Before: read-write"
		fi
		cs_bootro
		if [ $(cat /proc/mounts | grep -P "\sro[\s,]" | grep "/dev/mmcblk0p1 " | awk '{print $1}') ]; then
		    cs_echo "After : read-only"
		else
		    cs_echo "After : read-write"
		fi
		;;
	    check)
		sudo umount /dev/mmcblk0p1
		if [ ! $(cat /proc/mounts | grep "/dev/mmcblk0p1 " | awk '{print $1}') ]; then
		    sudo fsck -f -y /dev/mmcblk0p1
		    sudo mount /dev/mmcblk0p1 /boot
		else
		    cs_echo "Sorry! The drive can't be unmounted. Abort."
		    cs_echo ""
		fi
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft boot lock|unlock|check${RESET}"
		;;
	esac
    fi

    #timers
    if [ $1 == "timers" ]; then
	case $2 in
	    status)
		cs_echo "${CYAN}${BOLD}"
	    	sudo systemctl list-timers --all --no-pager | head -1
		cs_echo "_____________________________________________________________________________________________________________________${RESET}"
		cs_echo ""
		cs_echo "${GREEN}${BOLD}Day mode${RESET}"
		cs_echo "---------------------------------------------------------------------------------------------------------------------"
		cs_echo "${YELLOW}"
    		sudo systemctl list-timers --all --no-pager | grep daymode
		cs_echo "${RESET}"
		cs_echo ""
		cs_echo "${GREEN}${BOLD}Night mode${RESET}"
		cs_echo "---------------------------------------------------------------------------------------------------------------------"
		cs_echo "${YELLOW}"
    		sudo systemctl list-timers --all --no-pager | grep nightmode
		cs_echo "${RESET}"
		cs_echo ""
		cs_echo "${GREEN}${BOLD}Display backlight off/blank while no phone connected${RESET}"
		cs_echo "---------------------------------------------------------------------------------------------------------------------"
		cs_echo "${YELLOW}"
    		sudo systemctl list-timers --all --no-pager | grep disconnect
		cs_echo "${RESET}"
		cs_echo ""
		cs_echo "${GREEN}${BOLD}Shutdown while no phone connected${RESET}"
		cs_echo "---------------------------------------------------------------------------------------------------------------------"
		cs_echo "${YELLOW}"
    		sudo systemctl list-timers --all --no-pager | grep shutdown
		cs_echo "${RESET}"
		cs_echo ""
		cs_echo "${GREEN}${BOLD}Update check${RESET}"
		cs_echo "---------------------------------------------------------------------------------------------------------------------"
		cs_echo "${YELLOW}"
    		sudo systemctl list-timers --all --no-pager | grep update
		cs_echo "${RESET}"
		;;
	    disconnect)
		if [ ! -z $3 ]; then
		    if [ $3 == "stop" ]; then
			sudo systemctl stop disconnect.timer >/dev/null 2>&1
			sudo systemctl stop disconnect.service >/dev/null 2>&1
		    elif [ $3 == "start" ]; then
			sudo systemctl stop disconnect.timer >/dev/null 2>&1
			sudo systemctl stop disconnect.service >/dev/null 2>&1

			cs_systemrw
			if [ ! -z $DISCONNECTION_SCREEN_POWEROFF_SECS ]; then
			    if [ -f /etc/cs_first_start_done ]; then
				sudo sed -i 's/.*OnActiveSec=.*/ OnActiveSec='$DISCONNECTION_SCREEN_POWEROFF_SECS's/' /etc/systemd/system/disconnect.timer
			    else
				sudo sed -i 's/.*OnActiveSec=.*/ OnActiveSec=300s/' /etc/systemd/system/disconnect.timer
			    fi
			fi
			cs_systemro
			if [ ! -f /tmp/android_device ]; then
			    if [ $DISCONNECTION_SCREEN_POWEROFF_DISABLE -eq 0 ]; then
				if [ ! -f /tmp/btdevice ] && [ ! -f /tmp/media_playing ]; then
				    sudo systemctl start disconnect.timer >/dev/null 2>&1
				fi
			    fi
			fi
		    elif [ $3 == "set" ] && [ ! -z $4 ]; then
			re='^[0-9]+$'
			if [[ $4 =~ $re ]]; then
			    cs_bootrw
			    sudo sed -i 's/^DISCONNECTION_SCREEN_POWEROFF_SECS=.*/DISCONNECTION_SCREEN_POWEROFF_SECS='$4'/' /boot/crankshaft/crankshaft_env.sh
			    cs_bootro
			else
			    cs_echo "Not numeric"
			fi
		    elif [ $3 == "enable" ]; then
			cs_bootrw
			sudo sed -i 's/^DISCONNECTION_SCREEN_POWEROFF_DISABLE=.*/DISCONNECTION_SCREEN_POWEROFF_DISABLE=0/' /boot/crankshaft/crankshaft_env.sh
			cs_bootro
		    elif [ $3 == "disable" ]; then
			cs_bootrw
			sudo sed -i 's/^DISCONNECTION_SCREEN_POWEROFF_DISABLE=.*/DISCONNECTION_SCREEN_POWEROFF_DISABLE=1/' /boot/crankshaft/crankshaft_env.sh
			cs_bootro
			sudo systemctl stop disconnect.timer >/dev/null 2>&1
			sudo systemctl stop disconnect.service >/dev/null 2>&1
		    else
			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers disconnect start|stop|set|enable|disable${RESET}"
		    fi
		else
		    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers disconnect start|stop|set|enable|disable${RESET}"
		fi
		;;
	    shutdown)
		if [ ! -z $3 ]; then
		    if [ $3 == "stop" ]; then
			sudo systemctl stop shutdown.timer >/dev/null 2>&1
			sudo systemctl stop shutdown.service >/dev/null 2>&1
		    elif [ $3 == "start" ]; then
			sudo systemctl stop shutdown.timer >/dev/null 2>&1
			sudo systemctl stop shutdown.service >/dev/null 2>&1
			if [ ! -z $DISCONNECTION_POWEROFF_MINS ]; then
			    cs_systemrw
			    sudo sed -i 's/.*OnActiveSec=.*/ OnActiveSec='$DISCONNECTION_POWEROFF_MINS'm/' /etc/systemd/system/shutdown.timer
			    cs_systemrw
			fi
			if [ ! -f /tmp/android_device ]; then
			    if [ $DISCONNECTION_POWEROFF_DISABLE -eq 0 ]; then
				if [ ! -f /tmp/btdevice ] && [ ! -f /tmp/media_playing ]; then
				    sudo systemctl start shutdown.timer >/dev/null 2>&1
				fi
			    fi
			fi
		    elif [ $3 == "set" ] && [ ! -z $4 ]; then
			re='^[0-9]+$'
			if [[ $4 =~ $re ]]; then
			    cs_bootrw
			    sudo sed -i 's/^DISCONNECTION_POWEROFF_MINS=.*/DISCONNECTION_POWEROFF_MINS='$4'/' /boot/crankshaft/crankshaft_env.sh
			    cs_bootro
			else
			    cs_echo "Not numeric"
			fi
		    elif [ $3 == "enable" ]; then
			cs_bootrw
			sudo sed -i 's/^DISCONNECTION_POWEROFF_DISABLE=.*/DISCONNECTION_POWEROFF_DISABLE=0/' /boot/crankshaft/crankshaft_env.sh
			cs_bootro
		    elif [ $3 == "disable" ]; then
			cs_bootrw
			sudo sed -i 's/^DISCONNECTION_POWEROFF_DISABLE=.*/DISCONNECTION_POWEROFF_DISABLE=1/' /boot/crankshaft/crankshaft_env.sh
			cs_bootro
			sudo systemctl stop shutdown.timer >/dev/null 2>&1
			sudo systemctl stop shutdown.service >/dev/null 2>&1
		    else
			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers shutdown start|stop|set|enable|disable${RESET}"
		    fi
		else
		    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers shutdown start|stop|set|enable|disable${RESET}"
		fi
		;;
	    stop)
		sudo systemctl stop disconnect.timer >/dev/null 2>&1
		sudo systemctl stop disconnect.service >/dev/null 2>&1
		sudo systemctl stop shutdown.timer >/dev/null 2>&1
		sudo systemctl stop shutdown.service >/dev/null 2>&1
		;;
	    start)
		sudo systemctl stop disconnect.timer >/dev/null 2>&1
		sudo systemctl stop disconnect.service >/dev/null 2>&1
		sudo systemctl stop shutdown.timer >/dev/null 2>&1
		sudo systemctl stop shutdown.service >/dev/null 2>&1
		if [ ! -f /tmp/dev_mode_enabled ]; then
		    cs_systemrw
		    if [ ! -z $DISCONNECTION_SCREEN_POWEROFF_SECS ]; then
			if [ -f /etc/cs_first_start_done ]; then
			    sudo sed -i 's/.*OnActiveSec=.*/ OnActiveSec='$DISCONNECTION_SCREEN_POWEROFF_SECS's/' /etc/systemd/system/disconnect.timer
			else
			    sudo sed -i 's/.*OnActiveSec=.*/ OnActiveSec=300s/' /etc/systemd/system/disconnect.timer
			fi
		    fi
		    if [ ! -z $DISCONNECTION_POWEROFF_MINS ]; then
			sudo sed -i 's/.*OnActiveSec=.*/ OnActiveSec='$DISCONNECTION_POWEROFF_MINS'm/' /etc/systemd/system/shutdown.timer
		    fi
		    if [ ! -f /tmp/android_device ]; then
			if [ $DISCONNECTION_POWEROFF_DISABLE -eq 0 ]; then
			    if [ ! -f /tmp/btdevice ] && [ ! -f /tmp/media_playing ]; then
				sudo systemctl start shutdown.timer >/dev/null 2>&1
			    fi
			fi
			if [ $DISCONNECTION_SCREEN_POWEROFF_DISABLE -eq 0 ]; then
			    if [ ! -f /tmp/btdevice ] && [ ! -f /tmp/media_playing ]; then
				sudo systemctl start disconnect.timer >/dev/null 2>&1
			    fi
			fi
		    fi
		    cs_systemro
		fi
		;;
	    daynight)
		if [ -z $3 ] || [ -z $4 ]; then
		    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers daynight 0-23 0-23 | 1${RESET}"
		else
		    if [[ "$3" =~ ^[0-9]+$ ]] && [[ "$4" =~ ^[0-9]+$ ]]; then
			if [ "$3" -ge 24 ] || [ "$4" -ge 24 ]; then
			    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers daynight 0-23 0-23 | 2${RESET}"
			else
			    if [ "$3" -gt "$4" ]; then
				cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers daynight 0-23 0-23 | 3${RESET}"
			    else
				night=$(expr $4 - 1)
				dayhours="$3..$night"
				cs_echo "Day hours: $3..$night"
				# Night hours 0 -> day start
				hours="0"
				for ((i=1; i<$3; ++i))
				do
				    hours="$hours,$i"
				done
				# Night hours day end - 24(0)
				for ((i=$4; i<24; ++i))
				do
				    hours="$hours,$i"
				done
				cs_echo "Night hours: $hours"
				# Setup env
                                cs_bootrw
                                cs_systemrw
				sudo sed -i 's/^RTC_DAY_START=.*/RTC_DAY_START='$3'/' /boot/crankshaft/crankshaft_env.sh
				sudo sed -i 's/^RTC_NIGHT_START=.*/RTC_NIGHT_START='$4'/' /boot/crankshaft/crankshaft_env.sh
				# Setup timers
				# skip old style checking every minute
				#sudo sed -i 's/.*OnCalendar=.*/ OnCalendar=*-*-* '$3'..'$night':*:00/' /etc/systemd/system/daymode.timer
				#sudo sed -i 's/.*OnCalendar=.*/ OnCalendar=*-*-* '$hours':*:00/' /etc/systemd/system/nightmode.timer
				# use new style only checking on trigger time
				sudo sed -i 's/.*OnCalendar=.*/ OnCalendar=*-*-* '$3':00:00/' /etc/systemd/system/daymode.timer
				sudo sed -i 's/.*OnCalendar=.*/ OnCalendar=*-*-* '$4':00:00/' /etc/systemd/system/nightmode.timer
				sudo systemctl daemon-reload >/dev/null 2>&1
				if [ -z $5 ]; then
				    sudo systemctl stop daymode.timer >/dev/null 2>&1
				    sudo systemctl stop daymode.service >/dev/null 2>&1
				    sudo systemctl stop nightmode.timer >/dev/null 2>&1
				    sudo systemctl stop nightmode.service >/dev/null 2>&1
				    sudo systemctl start daymode.timer >/dev/null 2>&1
				    sudo systemctl start nightmode.timer >/dev/null 2>&1
				fi
                                cs_bootro
                                cs_systemro
			    fi
			fi
		    else
			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers daynight 0-23 0-23 | 3${RESET}"
		    fi
		fi
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers status|shutdown|disconnect|start|stop|daynight${RESET}"
		;;
	esac
    fi

    #settings
    if [ $1 == "settings" ]; then
	case $2 in
	    save)
		cs_bootrw
		# Copy settings file
		sudo cp -f /tmp/openauto.ini /boot/crankshaft/openauto.ini
		cs_bootro
		;;
	    restore)
		if [ -f /boot/crankshaft/openauto.ini ]; then
		    sudo cp -f /boot/crankshaft/openauto.ini /tmp/openauto.ini
		else
		    echo "[General]" > /tmp/openauto.ini
		    echo "ShowClock=false" >> /tmp/openauto.ini
		    echo "OldGUI=true" >> /tmp/openauto.ini
		    echo "[Video]" >> /tmp/openauto.ini
		    echo "FPS=1" >> /tmp/openauto.ini
		    echo "OMXLayerIndex=0" >> /tmp/openauto.ini
		    echo "[Audio]" >> /tmp/openauto.ini
            echo "OutputBackendType=1" >> /tmp/openauto.ini
            echo "MusicAudioChannelEnabled=false" >> /tmp/openauto.ini
            echo "SpeechAudioChannelEnabled=false" >> /tmp/openauto.ini
		fi
		sudo chown pi:pi /tmp/openauto.ini
		sudo chmod 777 /tmp/openauto.ini
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft settings save|restore${RESET}"
		;;
	esac
    fi

    #rtc
    if [ $1 == "rtc" ]; then
	case $2 in
	    abx80x)
		cs_bootrw
		cs_systemrw
		cs_rtc "abx80x" "$3"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    ds1307)
		cs_bootrw
		cs_systemrw
		cs_rtc "ds1307" "$3"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    ds1339)
		cs_bootrw
		cs_systemrw
		cs_rtc "ds1339" "$3"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    mcp7940x)
		cs_bootrw
		cs_systemrw
		cs_rtc "mcp7940x" "$3"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    mcp7941x)
		cs_bootrw
		cs_systemrw
		cs_rtc "mcp7941x" "$3"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    ds3231)
		cs_bootrw
		cs_systemrw
		cs_rtc "ds3231" "$3"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    pcf2127)
		cs_bootrw
		cs_systemrw
		cs_rtc "pcf2127" "$3"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    pcf8523)
		cs_bootrw
		cs_systemrw
		cs_rtc "pcf8523" "$3"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    pcf8563)
		cs_bootrw
		cs_systemrw
		cs_rtc "pcf8563" "$3"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    sync)
		# sync rtc time with sys
		sudo hwclock -s >/dev/null 2>&1
		# try sync with timeserver
		ping -c1 -w1 google.com >/dev/null 2>&1
		if [ "$?" = 0 ]
		then
		    cs_echo "---------------------------------------------------------"
		    cs_echo "Internet connection present. Syncing RTC with time server"
		    cs_systemrw
		    # disable/enable timesyncd to trigger resync
		    sudo timedatectl set-ntp 0
		    sudo timedatectl set-ntp 1
		    cs_echo "---------------------------------------------------------"
		    cs_echo "Wait for timesync..."
		    sleep 10
		    # write time from server to hwclock
		    sudo hwclock --systohc | logger
		    # write time from hwclock to sys
		    sudo hwclock --hctosys | logger
		    # show result
		    sudo timedatectl status
		    sudo timedatectl status | logger
		    result=$(cat /var/log/syslog | grep Synchronized | tail -n1 | awk {'print $3" "$6" "$7" "$8" "$9" "$10'})
		    cs_echo "$result"
		    cs_systemrw
		else
		    cs_echo "---------------------------------------------------------"
		    cs_echo "No internet connection!"
		    cs_echo "---------------------------------------------------------"
		fi
		;;
	    status)
		sudo timedatectl status
		;;
	    disable)
		cs_bootrw
		cs_systemrw
		#delete clock
		sudo sed -i 's/^# RTC Setup.*//' /boot/config.txt
		sudo sed -i '/dtoverlay=i2c-rtc/d' /boot/config.txt
		sudo sed -i '/rtc/d' /etc/modules
		sudo sed -i 's/^RTC_DAYNIGHT=.*/RTC_DAYNIGHT=0/' /boot/crankshaft/crankshaft_env.sh
		sudo sed -i '/./,/^$/!d' /boot/config.txt
		sudo sed -i '/./,/^$/!d' /boot/crankshaft/crankshaft_env.sh
		if [ ! -z $3 ]; then
		    sudo timedatectl set-timezone "$3"
		fi
		cs_check_i2c
		sudo systemctl disable hwclock-load.service >/dev/null 2>&1
		sudo systemctl daemon-reload
		cs_systemro
		cs_bootro
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft rtc abx80x|ds1307|ds1339|mcp7940x|mcp7941x|ds3231|pcf2127|pcf8523|pcf8563|sync|status|disable${RESET}"
		;;
	esac
    fi

    #timezone
    if [ $1 == "timezone" ]; then
	if [ ! -z $2 ]; then
	    cs_systemrw
	    date
	    sudo timedatectl set-timezone "$2"
	    date
	    cs_systemro
	else
	    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timezone xx (xx=Europe/London for example)${RESET}"
	fi
    fi

    #state
    if [ $1 == "state" ]; then
	case $2 in
	    day)
		/opt/crankshaft/service_daynight.sh app day
		;;
	    night)
		/opt/crankshaft/service_daynight.sh app night
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft state day|night${RESET}"
		;;
	esac
    fi

    #services
    if [ $1 == "services" ]; then
	case $2 in
	    reset)
		# Set default startup services state
		sudo systemctl enable gpio2kbd.service >/dev/null 2>&1
		sudo systemctl enable crankshaft.service >/dev/null 2>&1
		sudo systemctl enable user_startup.service >/dev/null 2>&1
		sudo systemctl enable devmode.service >/dev/null 2>&1
		sudo systemctl enable debugmode.service >/dev/null 2>&1
		sudo systemctl enable display.service >/dev/null 2>&1
		sudo systemctl enable user_startup.service >/dev/null 2>&1
		sudo systemctl enable update.service >/dev/null 2>&1
		sudo systemctl enable usbrestore.service >/dev/null 2>&1
		sudo systemctl enable usbdetect.service >/dev/null 2>&1
		sudo systemctl enable daymode.timer >/dev/null 2>&1
		sudo systemctl enable nightmode.timer >/dev/null 2>&1
		sudo systemctl enable tap2wake.service >/dev/null 2>&1
		sudo systemctl enable openauto.service >/dev/null 2>&1
		sudo systemctl enable gpiotrigger.service >/dev/null 2>&1
		sudo systemctl enable timerstart.service >/dev/null 2>&1
		sudo systemctl enable regensshkeys.service >/dev/null 2>&1
		sudo systemctl enable ssh.service >/dev/null 2>&1
		sudo systemctl enable kodimonitor.service >/dev/null 2>&1
		sudo systemctl disable rpicamserver.service >/dev/null 2>&1
		sudo systemctl disable wpa_supplicant.service >/dev/null 2>&1
		sudo systemctl disable networking.service >/dev/null 2>&1
		sudo systemctl disable dhcpcd.service >/dev/null 2>&1
		sudo systemctl disable regenerate_ssh_host_keys.service >/dev/null 2>&1
		sudo systemctl disable wifisetup.service >/dev/null 2>&1
		sudo systemctl disable systemd-rfkill.service >/dev/null 2>&1
		sudo systemctl disable systemd-rfkill.socket >/dev/null 2>&1
		sudo systemctl disable systemd-timesyncd.service >/dev/null 2>&1
		sudo systemctl disable hwclock-load.service >/dev/null 2>&1
		sudo systemctl disable resize2fs_once.service >/dev/null 2>&1
		sudo systemctl disable bluetooth.service >/dev/null 2>&1
		sudo systemctl disable hciuart.service >/dev/null 2>&1
		sudo systemctl disable hostapd.service >/dev/null 2>&1
		sudo systemctl disable dnsmasq.service >/dev/null 2>&1
		sudo systemctl disable hotspot.service >/dev/null 2>&1
		sudo systemctl disable alsa-state.service >/dev/null 2>&1
		sudo systemctl disable apply_noobs_os_config.service >/dev/null 2>&1
		sudo systemctl disable wifi-country.service >/dev/null 2>&1
		sudo systemctl disable alsa-restore.service >/dev/null 2>&1
		sudo systemctl disable raspi-config.service >/dev/null 2>&1
		sudo systemctl disable bluetooth >/dev/null 2>&1
		sudo systemctl disable hciuart >/dev/null 2>&1
		sudo systemctl disable ofono >/dev/null 2>&1
		sudo systemctl enable csng-bluetooth >/dev/null 2>&1
		sudo systemctl enable btautopair >/dev/null 2>&1
		sudo systemctl enable btautoconnect >/dev/null 2>&1
		sudo systemctl enable btdevicedetect >/dev/null 2>&1
		sudo systemctl enable btrestore >/dev/null 2>&1
		sudo systemctl daemon-reload >/dev/null 2>&1
		;;
	    status)
		systemctl list-units --type=service --all | grep 'Crankshaft-CONDOR\|UNIT'
		;;
	    failed)
		systemctl list-units --state=failed --no-pager --all
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft services status|reset|failed${RESET}"
		;;
	esac
    fi

    #reset
    if [ $1 == "reset" ]; then
	case $2 in
	    config.txt)
		cs_bootrw
		# power
		current_limit_override=`cat /boot/config.txt | grep ^current_limit_override= | cut -d= -f2`
		max_usb_current=`cat /boot/config.txt | grep ^max_usb_current= | cut -d= -f2`
		avoid_warnings=`cat /boot/config.txt | grep ^avoid_warnings= | cut -d= -f2`

		# Clear config.txt		
		sudo sh -c "echo '' > /boot/config.txt"

		sudo sh -c "echo '#Ignore the HDMI cable hotplug (to avoid the delay at startup)' >> /boot/config.txt"
        sudo sh -c "echo 'hdmi_ignore_hotplug=1' >> /boot/config.txt"

        sudo sh -c "echo '# Set the debug port on GPIO32, GPIO33 pins' >> /boot/config.txt"
        sudo sh -c "echo 'force_turbo=1' >> /boot/config.txt"
        sudo sh -c "echo 'dtoverlay=uart1,txd1_pin=32,rxd1_pin=33' >> /boot/config.txt"

        sudo sh -c "echo 'dtparam=i2c_arm=on' >> /boot/config.txt"
        sudo sh -c "echo 'dtparam=i2c1=off' >> /boot/config.txt"
        sudo sh -c "echo 'dtoverlay=i2c1,pins_44_45=1' >> /boot/config.txt"
        sudo sh -c "echo 'dtoverlay=goodix-7-acme' >> /boot/config.txt"

        sudo sh -c "echo '## Enable the DPI port to talk with the TFT display' >> /boot/config.txt"
        sudo sh -c "echo 'dtoverlay=dpi18' >> /boot/config.txt"
        sudo sh -c "echo 'overscan_left=0' >> /boot/config.txt"
        sudo sh -c "echo 'overscan_right=0' >> /boot/config.txt"
        sudo sh -c "echo 'overscan_top=0' >> /boot/config.txt"
        sudo sh -c "echo 'overscan_bottom=0' >> /boot/config.txt"
        sudo sh -c "echo 'framebuffer_width=800' >> /boot/config.txt"
        sudo sh -c "echo 'framebuffer_height=480' >> /boot/config.txt"
        sudo sh -c "echo 'enable_dpi_lcd=1' >> /boot/config.txt"
        sudo sh -c "echo 'display_default_lcd=1' >> /boot/config.txt"
        sudo sh -c "echo 'dpi_group=2' >> /boot/config.txt"
        sudo sh -c "echo 'dpi_mode=87' >> /boot/config.txt"
        sudo sh -c "echo 'dpi_output_format=0x6f005' >> /boot/config.txt"
        sudo sh -c "echo 'hdmi_timings=800 0 40 48 88 480 0 13 3 32 0 0 0 60 0 32000000 6' >> /boot/config.txt"

        sudo sh -c "gpio=28=op,dh' >> /boot/config.txt"
        sudo sh -c "gpio=29=ip' >> /boot/config.txt"


		# Custom power settings
		if [ ! -z "$current_limit_override" ] || [ ! -z "$max_usb_current" ] || [ ! -z "$avoid_warnings" ]; then
		    sudo sh -c "echo '' >> /boot/config.txt"
		    sudo sh -c "echo '# Custom power settings' >> /boot/config.txt"
		    if [ ! -z "$current_limit_override" ]; then
			sudo sh -c "echo 'current_limit_override=$current_limit_override' >> /boot/config.txt"
		    fi
		    if [ ! -z "$max_usb_current" ]; then
			sudo sh -c "echo 'max_usb_current=$max_usb_current' >> /boot/config.txt"
		    fi
		    if [ ! -z "$avoid_warnings" ]; then
			sudo sh -c "echo 'avoid_warnings=$avoid_warnings' >> /boot/config.txt"
		    fi
		fi

		# Crankshaft-CONDOR Base params
		sudo sh -c "echo '' >> /boot/config.txt"
		sudo sh -c "echo '# Disable Rainbow splash' >> /boot/config.txt"
		sudo sh -c "echo 'disable_splash=1' >> /boot/config.txt"

		sudo sh -c "echo '' >> /boot/config.txt"
		sudo sh -c "echo '# Disable the PWR LED.' >> /boot/config.txt"
		sudo sh -c "echo 'dtparam=pwr_led_trigger=none' >> /boot/config.txt"
		sudo sh -c "echo 'dtparam=pwr_led_activelow=off' >> /boot/config.txt"

        sudo sh -c "echo '' >> /boot/config.txt"
		sudo sh -c "echo '# Audio Setup' >> /boot/config.txt"
		sudo sh -c "echo 'dtparam=audio=off' >> /boot/config.txt"

        sudo sh -c "echo '' >> /boot/config.txt"
		sudo sh -c "echo '# GPU Mem' >> /boot/config.txt"
		sudo sh -c "echo 'gpu_mem=256' >> /boot/config.txt"

		# mount /boot ro after saving if not in dev mode
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		cs_echo " --- Check config.txt before! ---"
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft reset config.txt${RESET}"
		;;
	esac
    fi

    #branch select
    if [ $1 == "branch" ]; then
	case $2 in
	    release)
		echo "Current branch: $(cat /etc/crankshaft.branch)"
		cs_systemrw
		sudo sh -c 'echo "crankshaft-ng" > /etc/crankshaft.branch'
		sudo sh -c 'echo "0000-00-00" > /etc/crankshaft.date'
		cs_systemro
		echo "New branch: $(cat /etc/crankshaft.branch)"
		;;
	    dev)
		echo "Current branch: $(cat /etc/crankshaft.branch)"
		cs_systemrw
		sudo sh -c 'echo "csng-dev" > /etc/crankshaft.branch'
		sudo sh -c 'echo "0000-00-00" > /etc/crankshaft.date'
		cs_systemro
		echo "New branch: $(cat /etc/crankshaft.branch)"
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft branch release|dev${RESET}"
		;;
	esac
    fi

    #updates
    if [ $1 == "update" ]; then
	case $2 in
	    udev)
		touch udev_updating
		sudo rm /tmp/51-android.rules.md5 > /dev/null 2>&1
		sudo wget -q -O /tmp/51-android.rules.md5 --no-check-certificate https://raw.githubusercontent.com/xblack86/prebuilts/master/udev/51-android.rules.md5
                REMOTE=$(cat /tmp/51-android.rules.md5 | awk {'print $1'})
		LOCAL=$(md5sum /etc/udev/rules.d/51-android.master | awk {'print $1'})
                cs_echo "New file:     $REMOTE"
                cs_echo "Current file: $LOCAL"
                if [ -z $REMOTE ] || [ -z $LOCAL ]; then
                    cs_echo "ABORT: checksum fail."
		    sudo rm /tmp/udev_updating > /dev/null 2>&1
                    exit 1
                fi
		if [ "$REMOTE" == "$LOCAL" ]; then
		    cs_echo ""
		    cs_echo "ABORT: udev rules are up to date."
		else
                    cs_systemrw
		    # get source file
		    sudo wget -q --no-check-certificate -O /etc/udev/rules.d/51-android.master https://raw.githubusercontent.com/xblack86/prebuilts/master/udev/51-android.rules
		    # File which will be transformed
		    DEST=/etc/udev/rules.d/51-android.rules
		    sudo touch /etc/udev/rules.d/51-android.rules
		    sudo chmod 666 /etc/udev/rules.d/51-android.rules
		    # add master stuff
		    echo '' > $DEST
		    echo '# Skip storage devices' >> $DEST
                    echo 'KERNEL=="sd*", GOTO="SKIP_DEVICE"' >> $DEST
                    echo 'KERNEL=="sg*", GOTO="SKIP_DEVICE"' >> $DEST
                    echo 'SUBSYSTEM!="usb", GOTO="SKIP_DEVICE"' >> $DEST
		    cat /etc/udev/rules.d/51-android.master >> $DEST
		    # Add action
		    sudo sed -i 's/GROUP="plugdev"$/GROUP="plugdev", RUN+="\/opt\/crankshaft\/usb_action.sh add '\'\$env\{ID_MODEL\}\'' '\''%E\{DEVNAME\}'\''"/' $DEST
		    # Add disconnect action
		    echo '' >> $DEST
		    echo '# Disconnect action' >> $DEST
		    echo 'SUBSYSTEM=="usb", ACTION=="remove", RUN+="/opt/crankshaft/usb_action.sh remove '\'\$env\{ID_MODEL\}\'' '\''%E{DEVNAME}'\''"' >> $DEST
		    # Add disconnect action
		    echo '' >> $DEST
		    echo '# Skip action' >> $DEST
		    echo 'LABEL="SKIP_DEVICE"' >> $DEST
		    echo '' >> $DEST
		    # Reload rules
		    sudo udevadm control --reload-rules
		    cs_echo ""
		    cs_echo "OK: udev rules updated."
		    sudo rm /tmp/udev_update_available >/dev/null 2>&1
                    cs_systemro
		fi
		sudo rm /tmp/udev_updating > /dev/null 2>&1
		;;
	    csmt)
		touch /tmp/csmt_updating
		sudo rm /tmp/crankshaft.md5 > /dev/null 2>&1
		if [ ! -z $3 ] || [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
		    if [ "$3" == "dev" ] || [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
			sudo wget -q --no-check-certificate -O /tmp/crankshaft.md5 https://raw.githubusercontent.com/xblack86/prebuilts/csng-dev/csmt/crankshaft.md5
		    fi
		else
		    sudo wget -q --no-check-certificate -O /tmp/crankshaft.md5 https://raw.githubusercontent.com/xblack86/prebuilts/master/csmt/crankshaft.md5
		fi
		REMOTE=$(cat /tmp/crankshaft.md5 | awk {'print $1'})
		LOCAL=$(md5sum /usr/local/bin/crankshaft | awk {'print $1'})
		cs_echo "New csmt file:     $REMOTE"
		cs_echo "Current csmt file: $LOCAL"
		if [ -z $REMOTE ] || [ -z $LOCAL ]; then
		    cs_echo "ABORT: csmt - checksum fail."
		else
		    if [ "$REMOTE" == "$LOCAL" ]; then
			cs_echo ""
			cs_echo "ABORT: crankshaft management tool is up to date."
		    else
			cs_systemrw
			sudo rm /usr/local/bin/crankshaft.update >/dev/null 2>&1
			sudo rm /usr/local/bin/crankshaft.old >/dev/null 2>&1
			# get source file
			if [ ! -z $3 ] || [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
			    if [ "$3" == "dev" ] || [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
				cs_echo "DOWNLOAD: csmt dev"
				sudo wget -q --no-check-certificate -O /usr/local/bin/crankshaft.update https://raw.githubusercontent.com/xblack86/prebuilts/csng-dev/csmt/crankshaft
			    fi
			else
			    cs_echo "DOWNLOAD: csmt"
			    sudo wget -q --no-check-certificate -O /usr/local/bin/crankshaft.update https://raw.githubusercontent.com/xblack86/prebuilts/master/csmt/crankshaft
			fi
			# check download
			LOCAL=$(md5sum /usr/local/bin/crankshaft.update | awk {'print $1'})
			if [ "$REMOTE" == "$LOCAL" ]; then
			    sudo mv -f /usr/local/bin/crankshaft /usr/local/bin/crankshaft.old
			    sudo cp -f /usr/local/bin/crankshaft.update /usr/local/bin/crankshaft
			    sudo chmod 777 /usr/local/bin/crankshaft
			    sudo rm /usr/local/bin/crankshaft.update
			    cs_echo ""
			    cs_echo "OK: crankshaft management tool updated."
			    sudo rm /tmp/csmt_update_available >/dev/null 2>&1
			else
			    cs_echo "ABORT: csmt download checksum fail."
			fi
			cs_systemro
		    fi
		fi
		sudo rm /tmp/csmt_updating > /dev/null 2>&1

		# csmt failsave restore if missing and old build present
		if [ ! -f /usr/local/bin/crankshaft ] && [ -f /usr/local/bin/crankshaft.old ]; then
		    cs_systemrw
		    cs_echo "WARN: csmt was missing - failsave restore done!"
		    sudo mv -f /usr/local/bin/crankshaft.old /usr/local/bin/crankshaft
		    cs_systemro
		fi

		;;
	    openauto)
		touch /tmp/openauto_updating
		# openauto
		restart=0
		sudo rm /tmp/autoapp.md5 > /dev/null 2>&1
		if [ ! -z $3 ] || [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
		    if [ "$3" == "dev" ] || [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
			sudo wget -q --no-check-certificate -O /tmp/autoapp.md5 https://raw.githubusercontent.com/xblack86/prebuilts/csng-dev/openauto/autoapp.md5
		    fi
		else
		    sudo wget -q --no-check-certificate -O /tmp/autoapp.md5 https://raw.githubusercontent.com/xblack86/prebuilts/master/openauto/autoapp.md5
		fi
		REMOTE=$(cat /tmp/autoapp.md5 | awk {'print $1'})
		LOCAL=$(md5sum /usr/local/bin/autoapp | awk {'print $1'})
		cs_echo "New openauto file:     $REMOTE"
		cs_echo "Current openauto file: $LOCAL"
		if [ -z $REMOTE ] || [ -z $LOCAL ]; then
		    cs_echo "ABORT: openauto checksum fail."
		else
		    if [ "$REMOTE" == "$LOCAL" ]; then
			cs_echo ""
			cs_echo "ABORT: openauto is up to date."
			cs_echo ""
		    else
			cs_systemrw
			sudo rm /usr/local/bin/autoapp.update >/dev/null 2>&1
			sudo rm /usr/local/bin/autoapp.old >/dev/null 2>&1
			# get source file
			if [ ! -z $3 ] || [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
			    if [ "$3" == "dev" ] || [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
				cs_echo "DOWNLOAD: openauto dev"
				sudo wget -q --no-check-certificate -O /usr/local/bin/autoapp.update https://raw.githubusercontent.com/xblack86/prebuilts/csng-dev/openauto/autoapp
			    fi
			else
			    cs_echo "DOWNLOAD: openauto"
			    sudo wget -q --no-check-certificate -O /usr/local/bin/autoapp.update https://raw.githubusercontent.com/xblack86/prebuilts/master/openauto/autoapp
			fi
			# check download
			LOCAL=$(md5sum /usr/local/bin/autoapp.update | awk {'print $1'})
			if [ "$REMOTE" == "$LOCAL" ]; then
			    cs_echo "REPLACE: openauto"
			    sudo mv -f /usr/local/bin/autoapp /usr/local/bin/autoapp.old
			    sudo cp -f /usr/local/bin/autoapp.update /usr/local/bin/autoapp
			    sudo chmod 777 /usr/local/bin/autoapp
			    sudo rm /usr/local/bin/autoapp.update
			    cs_echo ""
			    cs_echo "OK: openauto updated."
			    cs_echo ""
			    sudo rm /tmp/openauto_update_available >/dev/null 2>&1
			    restart=1
			else
			    sudo rm /usr/local/bin/autoapp.update >/dev/null 2>&1
			    cs_echo "ABORT: openauto download checksum fail."
			fi
			cs_systemro
		    fi
		fi

		# openauto failsave restore if missing and old build present
		if [ ! -f /usr/local/bin/autoapp ] && [ -f /usr/local/bin/autoapp.old ]; then
		    cs_systemrw
		    cs_echo "WARN: openauto was missing - failsave restore done!"
		    sudo mv -f /usr/local/bin/autoapp.old /usr/local/bin/autoapp
		    cs_systemro
		fi

		# autoapp_helper
		sudo rm /tmp/autoapp_helper.md5 > /dev/null 2>&1
		if [ ! -z $3 ] || [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
		    if [ "$3" == "dev" ] || [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
		        sudo wget -q --no-check-certificate -O /tmp/autoapp_helper.md5 https://raw.githubusercontent.com/xblack86/prebuilts/csng-dev/openauto/autoapp_helper.md5
		    fi
		else
		    sudo wget -q --no-check-certificate -O /tmp/autoapp_helper.md5 https://raw.githubusercontent.com/xblack86/prebuilts/master/openauto/autoapp_helper.md5
		fi
		REMOTE=$(cat /tmp/autoapp_helper.md5 | awk {'print $1'})
		LOCAL=$(md5sum /usr/local/bin/autoapp_helper | awk {'print $1'})
		cs_echo "New autoapp_helper file:     $REMOTE"
		cs_echo "Current autoapp_helper file: $LOCAL"
		if [ -z $REMOTE ] || [ -z $LOCAL ]; then
		    cs_echo "ABORT: autoapp_helper checksum fail."
		else
		    if [ "$REMOTE" == "$LOCAL" ]; then
			cs_echo ""
			cs_echo "ABORT: autoapp_helper is up to date."
			cs_echo ""
		    else
			cs_systemrw
			sudo rm /usr/local/bin/autoapp_helper.update >/dev/null 2>&1
			sudo rm /usr/local/bin/autoapp_helper.old >/dev/null 2>&1
			# get source file
			if [ ! -z $3 ] || [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
			    if [ "$3" == "dev" ] || [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
				cs_echo "DOWNLOAD: autoapp_helper dev"
				sudo wget -q --no-check-certificate -O /usr/local/bin/autoapp_helper.update https://raw.githubusercontent.com/xblack86/prebuilts/csng-dev/openauto/autoapp_helper
			    fi
			else
			    cs_echo "DOWNLOAD: autoapp_helper"
			    sudo wget -q --no-check-certificate -O /usr/local/bin/autoapp_helper.update https://raw.githubusercontent.com/xblack86/prebuilts/master/openauto/autoapp_helper
			fi
			# check download
			LOCAL=$(md5sum /usr/local/bin/autoapp_helper.update | awk {'print $1'})
			if [ "$REMOTE" == "$LOCAL" ]; then
			    cs_echo "REPLACE: openauto"
			    sudo mv -f /usr/local/bin/autoapp_helper /usr/local/bin/autoapp_helper.old
			    sudo cp -f /usr/local/bin/autoapp_helper.update /usr/local/bin/autoapp_helper
			    sudo chmod 777 /usr/local/bin/autoapp_helper
			    sudo rm /usr/local/bin/autoapp_helper.update
			    cs_echo ""
			    cs_echo "OK: autoapp_helper updated."
			    restart=1
			else
			    sudo rm /usr/local/bin/autoapp_helper.update >/dev/null 2>&1
			    cs_echo "ABORT: autoapp_helper download checksum fail."
			fi
			cs_systemro
		    fi
		fi

		# autoapp_helper failsave restore if missing and old build present
		if [ ! -f /usr/local/bin/autoapp_helper ] && [ -f /usr/local/bin/autoapp_helper.old ]; then
		    cs_systemrw
		    cs_echo "WARN: autoapp_helper was missing - failsave restore done!"
		    sudo mv -f /usr/local/bin/autoapp_helper.old /usr/local/bin/autoapp_helper
		    cs_systemro
		fi

		if [ $restart -eq 1 ]; then
		    cs_echo "Restarting openauto after update"
		    touch /tmp/openauto_restart_updated > /dev/null 2>&1
		    sudo rm /tmp/openauto_updating > /dev/null 2>&1
		    sudo systemctl restart openauto
		fi
		sudo rm /tmp/openauto_updating > /dev/null 2>&1
		;;
	    system)
		sudo rm /tmp/latestimage > /dev/null 2>&1
		if [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
		    DEV_LATEST_FILE=`curl 'ftp://cloud.hawknetwork.de/FTP/' 2>/dev/null | grep zip | tail -1 | rev | cut -d" " -f1 | rev`
		    echo "ftp://cloud.hawknetwork.de/FTP/$DEV_LATEST_FILE" > /tmp/latestimage
		else
		    sudo wget -q --no-check-certificate -O /tmp/latestimage https://raw.githubusercontent.com/xblack86/prebuilts/master/latestimage/latest
		fi
		if [ "$(cat /tmp/latestimage)" != "" ]; then
		    BUILDID_LATEST=`echo "$(basename $(cat /tmp/latestimage))" | cut -d. -f1 | rev | cut -d- -f1 | rev`
		    BUILDDATE_LATEST=`echo "$(basename $(cat /tmp/latestimage))" | cut -d- -f1-3 | sed 's/-//g'`
		    BUILDDATE_CURRENT=`cat /etc/crankshaft.date | sed 's/-//g'`
		    if [ ${BUILDDATE_LATEST} -eq ${BUILDDATE_CURRENT} ] || [ ${BUILDDATE_LATEST} -gt ${BUILDDATE_CURRENT} ] || [ "$3" == "force" ]; then
			if [ "$BUILDID_LATEST" != "$(cat /etc/crankshaft.build)" ] || [ ${BUILDDATE_LATEST} -gt ${BUILDDATE_CURRENT} ] || [ "$3" == "force" ]; then
			    if [ -d /media/USBDRIVES/CSSTORAGE ]; then
				cs_echo "Start downloading..."
				touch /tmp/system_update_downloading > /dev/null 2>&1
				start_trigger
				sudo wget --no-check-certificate -t 3 -T 60 -O "/media/USBDRIVES/CSSTORAGE/$(basename $(cat /tmp/latestimage))" "$(cat /tmp/latestimage)"
				if [ $? == 0 ]; then
				    cs_echo "OK: Download finished."
				    touch /tmp/system_update_ready > /dev/null 2>&1
				    if [ "$3" == "force" ]; then
					touch /media/USBDRIVES/CSSTORAGE/FORCE_FLASH > /dev/null 2>&1
				    fi
				else
				    sudo rm /media/USBDRIVES/CSSTORAGE/$(basename $(cat /tmp/latestimage))
				    sudo rm /media/USBDRIVES/CSSTORAGE/FORCE_FLASH > /dev/null 2>&1
				    cs_echo "ABORT: Download failed."
				fi
				sudo rm /tmp/system_update_downloading > /dev/null 2>&1
				sudo killall download_trigger > /dev/null 2>&1
				sudo rm /tmp/download_trigger > /dev/null 2>&1
			    else
				cs_echo "ABORT: CSSTORAGE not available as download destination."
			    fi
			else
			    cs_echo ""
			    cs_echo "ABORT: system is up to date."
			    cs_echo ""
			fi
		    else
			cs_echo ""
			cs_echo "ABORT: system is up to date."
			cs_echo ""
		    fi
		else
		    cs_echo "ABORT: Empty image url."
		fi
		;;
	    check)
		if [ "`ping -c 1 google.com`" ]; then
		    cs_echo "Internet connection available"
		    cs_echo ""
		    # Check udev rules
		    sudo rm /tmp/51-android.rules.md5 > /dev/null 2>&1
		    if [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
			sudo wget -q -O /tmp/51-android.rules.md5 --no-check-certificate https://raw.githubusercontent.com/xblack86/prebuilts/csng-dev/udev/51-android.rules.md5
		    else
			sudo wget -q -O /tmp/51-android.rules.md5 --no-check-certificate https://raw.githubusercontent.com/xblack86/prebuilts/master/udev/51-android.rules.md5
		    fi
		    REMOTE_UDEV=$(cat /tmp/51-android.rules.md5 | awk {'print $1'})
		    LOCAL_UDEV=$(md5sum /etc/udev/rules.d/51-android.master | awk {'print $1'})
		    sudo rm /tmp/51-android.rules.md5 > /dev/null 2>&1

		    # Check crankshaft amangement tool
		    sudo rm /tmp/crankshaft.md5 > /dev/null 2>&1
		    if [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
			sudo wget -q --no-check-certificate -O /tmp/crankshaft.md5 https://raw.githubusercontent.com/xblack86/prebuilts/csng-dev/csmt/crankshaft.md5
		    else
			sudo wget -q --no-check-certificate -O /tmp/crankshaft.md5 https://raw.githubusercontent.com/xblack86/prebuilts/master/csmt/crankshaft.md5
		    fi
		    REMOTE_CSMT=$(cat /tmp/crankshaft.md5 | awk {'print $1'})
		    LOCAL_CSMT=$(md5sum /usr/local/bin/crankshaft | awk {'print $1'})
		    sudo rm /tmp/crankshaft.md5 > /dev/null 2>&1

		    # Check openauto
		    sudo rm /tmp/autoapp.md5 > /dev/null 2>&1
		    if [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
			sudo wget -q --no-check-certificate -O /tmp/autoapp.md5 https://raw.githubusercontent.com/xblack86/prebuilts/csng-dev/openauto/autoapp.md5
		    else
			sudo wget -q --no-check-certificate -O /tmp/autoapp.md5 https://raw.githubusercontent.com/xblack86/prebuilts/master/openauto/autoapp.md5
		    fi
		    REMOTE_OPENAUTO=$(cat /tmp/autoapp.md5 | awk {'print $1'})
		    LOCAL_OPENAUTO=$(md5sum /usr/local/bin/autoapp | awk {'print $1'})
		    sudo rm /tmp/autoapp.md5 > /dev/null 2>&1

		    # Check latest image
		    sudo rm /tmp/latestimage > /dev/null 2>&1
		    if [ "$(cat /etc/crankshaft.branch)" == "csng-dev" ]; then
			DEV_LATEST_FILE=`curl 'ftp://cloud.hawknetwork.de/FTP/' 2>/dev/null | grep crankshaft | grep zip | tail -1 | rev | cut -d" " -f1 | rev`
			if [ "$DEV_LATEST_FILE" == "" ]; then
			    cs_echo "No file on ftp!"
			    cs_echo ""
			    DEV_LATEST_FILE="$(cat /etc/crankshaft.date)-crankshaft-ng-$(cat /etc/crankshaft.build).zip"
			fi
			echo "ftp://cloud.hawknetwork.de/FTP/$DEV_LATEST_FILE" > /tmp/latestimage
		    else
			sudo wget -q --no-check-certificate -O /tmp/latestimage https://raw.githubusercontent.com/xblack86/prebuilts/master/latestimage/latest
		    fi

		    # Check latest patron image (upcoming public release)
		    sudo rm /tmp/latestpatreon > /dev/null 2>&1
		    sudo wget -q --no-check-certificate -O /tmp/latestpatreon https://raw.githubusercontent.com/xblack86/prebuilts/master/latestimage/patreon

		    # Notifications
		    # udev
		    if [ "$REMOTE_UDEV" != "$LOCAL_UDEV" ]; then
			cs_echo "New udev rules available!"
			sudo rm /tmp/udev_update_available > /dev/null 2>&1
			touch /tmp/udev_update_available
		    else
			sudo rm /tmp/udev_update_available > /dev/null 2>&1
		    fi
		    # csmt
		    if [ "$REMOTE_CSMT" != "$LOCAL_CSMT" ]; then
			cs_echo "New csmt available!"
			sudo rm /tmp/csmt_update_available > /dev/null 2>&1
			touch /tmp/csmt_update_available
		    else
			sudo rm /tmp/csmt_update_available > /dev/null 2>&1
		    fi
		    # openauto
		    if [ "$REMOTE_OPENAUTO" != "$LOCAL_OPENAUTO" ]; then
			cs_echo "New openauto available!"
			sudo rm /tmp/openauto_update_available > /dev/null 2>&1
			touch /tmp/openauto_update_available
		    else
			sudo rm /tmp/openauto_update_available > /dev/null 2>&1
		    fi

		    # latest image
		    if [ "$(cat /tmp/latestimage)" != "" ]; then
			REMOTE_IMAGE=""
			BUILDID_LATEST=`echo "$(basename $(cat /tmp/latestimage))" | cut -d. -f1 | rev | cut -d- -f1 | rev`
			BUILDDATE_LATEST=`echo "$(basename $(cat /tmp/latestimage))" | cut -d- -f1-3 | sed 's/-//g'`
			BUILDDATE_CURRENT=`cat /etc/crankshaft.date | sed 's/-//g'`
			if [ ${BUILDDATE_LATEST} -eq ${BUILDDATE_CURRENT} ] || [ ${BUILDDATE_LATEST} -gt ${BUILDDATE_CURRENT} ]; then
			    if [ "$BUILDID_LATEST" != "$(cat /etc/crankshaft.build)" ] || [ ${BUILDDATE_LATEST} -gt ${BUILDDATE_CURRENT} ]; then
				cs_echo "New system image available!"
				sudo rm /tmp/system_update_available > /dev/null 2>&1
				sudo touch /tmp/system_update_available
				# Skip other updates cause newer system available including it
				sudo rm /tmp/openauto_update_available >/dev/null 2>&1
				sudo rm /tmp/csmt_update_available >/dev/null 2>&1
				sudo rm /tmp/udev_update_available >/dev/null 2>&1
				REMOTE_IMAGE="new"
			    else
				sudo rm /tmp/system_update_available > /dev/null 2>&1
			    fi
			else
			    sudo rm /tmp/system_update_available > /dev/null 2>&1
			fi
		    fi

		    if [ "$(cat /tmp/latestpatreon)" != "" ]; then
			BUILDDATE_LATESTPATREON=`echo "$(basename $(cat /tmp/latestpatreon))" | cut -d- -f1-3 | sed 's/-//g'`
			BUILDDATE_CURRENT=`cat /etc/crankshaft.date | sed 's/-//g'`
			if [ ${BUILDDATE_LATESTPATREON} -eq  ${BUILDDATE_CURRENT} ] && [ "$(cat /etc/crankshaft.branch)" != "csng-dev" ]; then
			    cs_echo "You are on latest patreon image - skipping updates until public release!"
			    # Skip updates cause newer system image is in pipeline for public release
			    sudo rm /tmp/system_update_available > /dev/null 2>&1
			    sudo rm /tmp/openauto_update_available >/dev/null 2>&1
			    sudo rm /tmp/csmt_update_available >/dev/null 2>&1
			    sudo rm /tmp/udev_update_available >/dev/null 2>&1
			    REMOTE_IMAGE=""
			fi
		    fi

		    # no updates
		    if [ "$REMOTE_CSMT" == "$LOCAL_CSMT" ] && [ "$REMOTE_UDEV" == "$LOCAL_UDEV" ] && [ "$REMOTE_OPENAUTO" == "$LOCAL_OPENAUTO" ] && [ "$REMOTE_IMAGE" != "new" ]; then
			cs_echo "No new updates"
		    fi
		else
		    cs_echo ""
		    cs_echo "No internet connection available"
		fi
		;;
	    cancel)
		sudo killall wget > /dev/null 2>&1
		sudo killall download_trigger > /dev/null 2>&1
		sudo rm /tmp/system_update_available > /dev/null 2>&1
		sudo rm /tmp/openauto_update_available >/dev/null 2>&1
		sudo rm /tmp/csmt_update_available >/dev/null 2>&1
		sudo rm /tmp/udev_update_available >/dev/null 2>&1
		sudo rm /tmp/system_update_downloading > /dev/null 2>&1
		sudo rm /media/USBDRIVES/CSSTORAGE/FORCE_FLASH > /dev/null 2>&1
		sudo rm /tmp/system_update_ready > /dev/null 2>&1
		sudo rm /tmp/download_trigger > /dev/null 2>&1
		sudo rm /media/USBDRIVES/CSSTORAGE/$(basename $(cat /tmp/latestimage))
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft update udev|csmt|openauto|check|cancel${RESET}"
		;;
	esac
    fi

    #systemcheck
    if [ $1 == "systemcheck" ]; then
	cs_echo "Checking systemd automount flag:"
	cs_echo ""
	CHECK=`cat /lib/systemd/system/systemd-udevd.service | grep ^MountFlags | cut -d= -f2`
	if  [ "$CHECK" != "shared" ]; then
	    cs_echo "${RED}${BOLD}CSMT has detected a wrong setup in systemd for usb drives!${RESET}"
	    cs_echo "${RED}${BOLD}Applying fix for it...${RESET}"
	    cs_systemrw
	    # Make udev mountpoints shared
	    sudo sed -i 's/^MountFlags=.*/MountFlags=shared/' /lib/systemd/system/systemd-udevd.service
	    cs_systemro
	    cs_echo "${BOLD}${CYAN}Reboot your system to activate the fix!${RESET}"
	    cs_echo ""
	else
	    cs_echo "Automount flag: ${BOLD}${GREEN}OK${RESET}"
	    cs_echo ""
	fi
	cs_echo ""
	cs_echo "All checks done."
    fi

    #usb
    if [ $1 == "usb" ]; then
	case $2 in
	    list)
		cs_echo "This usb mass storage drives was detected:"
		cs_echo ""
		REMOVABLE_DRIVES=""
		for _device in /sys/block/*/device; do
		    if echo $(readlink -f "$_device")|egrep -q "usb"; then
		        _disk=$(echo "$_device" | cut -f4 -d/)
			COUNT=1
			while [ $COUNT -lt 4 ]; do
			    LABEL=$(sudo blkid /dev/${_disk}$COUNT | sed 's/.*LABEL="//' | cut -d'"' -f1)
			    FSTYPE=$(sudo blkid /dev/${_disk}$COUNT | sed 's/.*TYPE="//' | cut -d'"' -f1)
			    if [ "$LABEL" != "" ] || [ "$FSTYPE" != "" ]; then
				cs_echo "Detected Drive: ${CYAN}${BOLD}${_disk}$COUNT${RESET}"
				cs_echo "Label 1st Part: ${GREEN}${BOLD}${LABEL}${RESET}"
				cs_echo "PartFilesystem: ${YELLOW}${BOLD}${FSTYPE}${RESET}"
				if [ "${LABEL}" == "CSSTORAGE" ]; then
				    cs_echo "${RED}${BOLD}This drive is controlled by system and can't be manually mounted/unmounted!${RESET}"
				else
				    cs_echo "Mount Command : ${MAGENTA}${BOLD}crankshaft usb mount ${RESET}${CYAN}${BOLD}${_disk}$COUNT${RESET}"
				fi
				cs_echo ""
			    fi
			    let COUNT=COUNT+1
			done
			cs_echo "--------------------------------------------------------------------------"
		    fi
		done
		;;
	    mount)
		if [ ! -z $3 ]; then
		    DEVICE=$3
                    if sudo mount | grep CSSTORAGE | grep /dev/$DEVICE > /dev/null; then
		        cs_echo "${YELLOW}${BOLD}USB device is CSSTORAGE and handled by system - exit...${RESET}"
		        cs_echo ""
		        cs_echo "Done."
			exit 0
                    else
		        if [ ! -d /media/USBDRIVES/$DEVICE ]; then
			    cs_systemrw
			    sudo mkdir /media/USBDRIVES/$DEVICE
			    cs_systemro
		        fi
		        if sudo mount | grep /media/USBDRIVES/$DEVICE > /dev/null; then
			    cs_echo "${YELLOW}${BOLD}Destination folder is still mounted - unmount it before new mount!${RESET}"
		    	    cs_echo ""
		    	    cs_echo "Done."
			    exit 0
		        fi
		        sudo mount -o sync /dev/$DEVICE /media/USBDRIVES/$DEVICE
		        if [ $? -ne 0 ]; then
			    cs_echo "${RED}${BOLD}Mount was not possible - abbort...${RESET}"
		        else
			    cs_echo "${GREEN}${BOLD}Mount successfull${RESET} - Device /dev/$DEVICE ($(sudo blkid /dev/$DEVICE | sed 's/.*LABEL="//' | cut -d'"' -f1))  mountet to /media/USBDRIVES/$DEVICE"
		        fi
                    fi
		fi
		;;
	    umount)
		if [ ! -z $3 ]; then
		    DEVICE=$3
		    sudo umount /media/USBDRIVES/$DEVICE
		    if [ $? -ne 0 ]; then
			cs_echo "${RED}${BOLD}Unmount was not possible - abbort...${RESET}"
			cs_echo ""
		    else
			cs_echo "${GREEN}${BOLD}Unmount successfull - You can now remove device.${RESET}"
			sudo rmdir /media/USBDRIVES/$DEVICE
			cs_echo ""
			cs_echo "Done."
		    fi
		fi
		;;
	    identify)
		    RUN=0
		    CHECK=`ps -ax | grep autoapp | grep -v grep | tail -n 1`
		    if [ "$CHECK" != "" ]; then
			echo "Auto exit OpenAuto (restart after exit of this check)..."
			echo ""
			sudo systemctl stop openauto
			RUN=1
			if [ -f /tmp/android_device ]; then
			    echo "Please disconnect your phone and reconnect to get correct id's"
			    echo "cause device switches the id's in android auto mode!"
			    echo ""
			    echo "Script is waiting 30 seconds..."
			    sleep 30
			fi
		    fi
		    sudo lsusb | cut -d" " -f2,4 | sed 's/://g' |
		    while IFS= read -r line
		    do
			bus=$(echo $line | cut -d" " -f1)
			device=$(echo $line | cut -d" " -f2)
			echo ""
			echo "${RED}${BOLD}USB-Device $bus/$device:${RESET}"
			echo ""
			FULLDESC=`sudo udevadm info -q all -n /dev/bus/usb/$bus/$device | grep -Ei '(ID_MODEL=|ID_MODEL_ID=|ID_VENDOR=|ID_VENDOR_ID=)' | sed 's/E: //g'`
			ID_MODEL=`echo $FULLDESC | cut -d" " -f1 | grep ID_MODEL= | cut -d= -f2`
			ID_MODEL_ID=`echo $FULLDESC | cut -d" " -f2 | grep ID_MODEL_ID= | cut -d= -f2`
			ID_MODEL_FROM_DATABASE=`sudo udevadm info -q all -n /dev/bus/usb/$bus/$device | grep -Ei '(ID_MODEL_FROM_DATABASE=)' | sed 's/E: //g' | cut -d= -f2`
			ID_VENDOR=`echo $FULLDESC | cut -d" " -f3 | grep ID_VENDOR= | cut -d= -f2`
			ID_VENDOR_ID=`echo $FULLDESC | cut -d" " -f4 | grep ID_VENDOR_ID= | cut -d= -f2`
			ID_VENDOR_FROM_DATABASE=`sudo udevadm info -q all -n /dev/bus/usb/$bus/$device | grep -Ei '(ID_VENDOR_FROM_DATABASE=)' | sed 's/E: //g' | cut -d= -f2`
			echo "Model ID : "$ID_MODEL_ID
			echo "Vendor ID: "$ID_VENDOR_ID
			echo "Model    : "$ID_MODEL" ("$ID_MODEL_FROM_DATABASE")"
			echo "Vendor   : "$ID_VENDOR" ("$ID_VENDOR_FROM_DATABASE")"
		    done
		    if [ $RUN -eq 1 ]; then
			sudo systemctl start openauto
		    fi
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft usb list|mount|umount|identify${RESET}"
		;;
	esac
    fi

    #hotspot
    if [ $1 == "hotspot" ]; then
	case $2 in
	    status)
		HOSTAPD=`systemctl status hostapd | grep running | awk {'print $3'} | cut -d'(' -f2 | cut -d')' -f1`
		DNSMASQ=`systemctl status hostapd | grep running | awk {'print $3'} | cut -d'(' -f2 | cut -d')' -f1`
		cs_echo "Hostapd: $HOSTAPD"
		cs_echo "Dnsmasq: $DNSMASQ"
		cs_echo ""
                if [ -f /tmp/dnsmasq.leases ]; then
		    while read -r line
		    do
		        LEASE=`echo $line | awk {'print "Device: "$4" ("$2") - IP-Lease: "$3'}`
		        cs_echo "$LEASE"
		    done < "/tmp/dnsmasq.leases"
                else
                    cs_echo "No DHCP lease file present"
                fi
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft hotspot status${RESET}"
		;;
	esac
    fi

    #syslog
    if [ $1 == "syslog" ]; then
	cat /var/log/syslog
    fi

    #oalog
    if [ $1 == "oalog" ]; then
	cat /tmp/openauto.log
    fi

    #bluetooth
    if [ $1 == "bluetooth" ]; then
	case $2 in
	    save)
		cs_bootrw
		sudo rm -f /boot/crankshaft/bluetooth-pairings.tar.gz
		sudo tar -cvf /boot/crankshaft/bluetooth-pairings.tar.gz /tmp/bluetooth
		cs_bootro
		;;
	    restore)
		sudo tar -xvf /boot/crankshaft/bluetooth-pairings.tar.gz -C /
		sudo chmod -R 777 /tmp/bluetooth/
		;;
	    status)
		bt-device -l | grep -e '(' | grep -e ':' | cut -d'(' -f2 | cut -d')' -f1 | while read paired; do
		    device=$(bt-device -i  $paired | grep -e 'Name:' | cut -d':' -f2 | sed 's/^ //g' | sed 's/ *$//g')
		    state=$(bt-device -i  $paired | grep -e 'Connected:' | cut -d':' -f2 |  sed 's/^ //g' | sed 's/ *$//g')
		    if [ "$state" == "1" ]; then
			echo "Device: $device | MAC: $paired | State: Connected"
		    else
			echo "Device: $device | MAC: $paired | State: Disconnected"
		    fi
		done
		;;
	    unpair)
		cs_clear_bluetooth
		cs_bootrw
		sudo rm -f /boot/crankshaft/bluetooth-pairings.tar.gz
		cs_bootro
		cs_bluetooth_pairable
		;;
	    pairable)
		cs_bluetooth_pairable
		;;
	    builtin)
		cs_bootrw
		cs_systemrw
		sudo sed -i '/./,/^$/!d' /boot/config.txt
		sudo sed -i 's/^dtoverlay=pi3-disable-bt.*//' /boot/config.txt
		sudo sed -i 's/^# Bluetooth.*//' /boot/config.txt
		sudo sed -i '/./,/^$/!d' /boot/config.txt
		sudo sed -i '/./,/^$/!d' /etc/rc.local
		sudo sed -i 's/^rfkill block bluetooth.*//' /etc/rc.local
		sudo sed -i '/./,/^$/!d' /etc/rc.local
		sudo systemctl enable hciuart >/dev/null 2>&1
		sudo systemctl enable bluetooth >/dev/null 2>&1
		sudo systemctl enable ofono >/dev/null 2>&1
        sudo sed -i 's/^ENABLE_BLUETOOTH=.*/ENABLE_BLUETOOTH=1/' /boot/crankshaft/crankshaft_env.sh
        sudo sed -i 's/^EXTERNAL_BLUETOOTH=.*/EXTERNAL_BLUETOOTH=0/' /boot/crankshaft/crankshaft_env.sh
		cs_bootro
		cs_systemro
		;;
	    external)
		cs_bootrw
		cs_systemrw
		sudo sed -i '/./,/^$/!d' /boot/config.txt
		sudo sed -i 's/^dtoverlay=pi3-disable-bt.*//' /boot/config.txt
		sudo sed -i 's/^# Bluetooth.*//' /boot/config.txt
		sudo sed -i '/./,/^$/!d' /boot/config.txt
		sudo sed -i '/./,/^$/!d' /etc/rc.local
		sudo sed -i 's/^rfkill block bluetooth.*//' /etc/rc.local
		sudo sed -i '/./,/^$/!d' /etc/rc.local
		sudo sh -c "echo '' >> /boot/config.txt"
		sudo sh -c "echo '# Bluetooth' >> /boot/config.txt"
		sudo sh -c "echo 'dtoverlay=pi3-disable-bt' >> /boot/config.txt"
		sudo systemctl disable hciuart >/dev/null 2>&1
		sudo systemctl enable bluetooth >/dev/null 2>&1
		sudo systemctl enable ofono >/dev/null 2>&1
        sudo sed -i 's/^ENABLE_BLUETOOTH=.*/ENABLE_BLUETOOTH=1/' /boot/crankshaft/crankshaft_env.sh
        sudo sed -i 's/^EXTERNAL_BLUETOOTH=.*/EXTERNAL_BLUETOOTH=1/' /boot/crankshaft/crankshaft_env.sh
		cs_bootro
		cs_systemro
		;;
	    disable)
		cs_bootrw
		cs_systemrw
		sudo sed -i '/./,/^$/!d' /boot/config.txt
		sudo sed -i 's/^dtoverlay=pi3-disable-bt.*//' /boot/config.txt
		sudo sed -i 's/^# Bluetooth.*//' /boot/config.txt
		sudo sed -i '/./,/^$/!d' /boot/config.txt
		sudo sed -i '/./,/^$/!d' /etc/rc.local
		sudo sed -i 's/^rfkill block bluetooth.*//' /etc/rc.local
		sudo sed -i 's/^exit 0.*//' /etc/rc.local
		sudo sed -i '/./,/^$/!d' /etc/rc.local
		sudo sh -c "echo '' >> /boot/config.txt"
		sudo sh -c "echo '# Bluetooth' >> /boot/config.txt"
		sudo sh -c "echo 'dtoverlay=pi3-disable-bt' >> /boot/config.txt"
		sudo sh -c "echo 'rfkill block bluetooth' >> /etc/rc.local"
		sudo sh -c "echo 'exit 0' >> /etc/rc.local"
		sudo systemctl disable hciuart >/dev/null 2>&1
		sudo systemctl disable bluetooth >/dev/null 2>&1
		sudo systemctl disable ofono >/dev/null 2>&1
        sudo sed -i 's/^ENABLE_BLUETOOTH=.*/ENABLE_BLUETOOTH=0/' /boot/crankshaft/crankshaft_env.sh
        sudo sed -i 's/^EXTERNAL_BLUETOOTH=.*/EXTERNAL_BLUETOOTH=0/' /boot/crankshaft/crankshaft_env.sh
		cs_bootro
		cs_systemro
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft bluetooth save|restore|status|unpair|pairable|builtin|external|disable${RESET}"
		;;
	esac
    fi

    
    #resize partition and fs
    if [ $1 == "resize" ]; then
	cs_systemrw
	currentsize=$(sudo parted /dev/mmcblk0p2 print | tail -n2 | head -n1 | awk {'print $4'})
	cs_echo "Current partition size: $currentsize"
        echo "[${CYAN}${BOLD} INFO ${RESET}] " >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] *******************************************************" >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] Current partition size: $currentsize" >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] *******************************************************" >/dev/tty3
	cs_echo ""
	sleep 2
	sudo parted /dev/mmcblk0 resizepart 2 100% >/dev/null 2>&1
	newsize=$(sudo parted /dev/mmcblk0p2 print | tail -n2 | head -n1 | awk {'print $4'})
	cs_echo "New partition size: $newsize"
        echo "[${CYAN}${BOLD} INFO ${RESET}] " >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] *******************************************************" >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] New partition size: $newsize" >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] *******************************************************" >/dev/tty3
	cs_echo ""
	sleep 2
	cs_echo "Start filesystem resize:"
	cs_echo ""
        echo "[${CYAN}${BOLD} INFO ${RESET}] " >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] *******************************************************" >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] Resizing filesystem..." >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] *******************************************************" >/dev/tty3
	sudo resize2fs /dev/mmcblk0p2 >/dev/null 2>&1
        sudo touch /etc/cs_resize_done
	cs_systemro
    fi

    #temp
    if [ $1 == "temp" ]; then
	# cpu freq
	typeset -i freq
	freq=$(sudo cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq)/1000
	echo "$freq MHz"
	echo ""
	# cpu temp
	echo $(/opt/vc/bin/vcgencmd measure_temp | cut -d= -f2)
    fi

    #plymouth splashscreen
    if [ $1 == "splash" ]; then
	case $2 in
	    animation)
		cs_systemrw
		sudo plymouth-set-default-theme csnganimation
		cs_systemro
		;;
	    classic)
		cs_systemrw
		sudo plymouth-set-default-theme crankshaft
		cs_systemro
		;;
	    custom)
		cs_systemrw
		sudo plymouth-set-default-theme custom
		cs_systemro
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft splash animation|classic|custom${RESET}"
		;;
	esac
    fi

    #debuglog
    if [ $1 == "debuglog" ]; then
        touch /tmp/debug_in_progress
	cs_bootrw
	cs_echo "Creating logs - Please wait..."
	sudo rm -rf /tmp/debuglogs >/dev/null 2>&1
	sudo mkdir /tmp/debuglogs
	sudo chmod 777 /tmp/debuglogs
	sudo cp -f /boot/config.txt /tmp/debuglogs/
	sudo cp -f /boot/cmdline.txt /tmp/debuglogs/
	sudo cp -f /boot/crankshaft/crankshaft_env.sh /tmp/debuglogs/
	sudo cp -f /tmp/wpa_supplicant.conf /tmp/debuglogs/
	sudo cp -f /etc/hostapd/hostapd.conf /tmp/debuglogs/
	sudo cp -f /tmp/temp_recent_list /tmp/debuglogs/ >/dev/null 2>&1
	sudo cp -f /tmp/hotspot_active /tmp/debuglogs/ >/dev/null 2>&1
	sudo cp -f /home/pi/openauto.ini /tmp/debuglogs/
	sudo cp -f /tmp/openauto.log /tmp/debuglogs/
	sudo cp -f /home/pi/openauto_wifi_recent.ini /tmp/debuglogs/ >/dev/null 2>&1
	sudo cp -f /home/pi/.xinitrc /tmp/debuglogs/
	cat /etc/crankshaft.build > /tmp/debuglogs/cs-version
	cat /etc/crankshaft.date >> /tmp/debuglogs/cs-version
	sudo cp -f /var/log/syslog /tmp/debuglogs/
	sudo cp -f /var/log/messages /tmp/debuglogs/
	sudo cp -f /var/log/kern.log /tmp/debuglogs/
	sudo cp -f /var/log/Xorg.0.log /tmp/debuglogs/ >/dev/null 2>&1
	sudo cp -f /var/log/daemon.log /tmp/debuglogs/
	sudo cp -f /var/log/user.log /tmp/debuglogs/
	sudo cp -f /etc/asound.conf /tmp/debuglogs/ >/dev/null 2>&1
	sudo cp -f /home/pi/.asoundrc /tmp/debuglogs/ >/dev/null 2>&1
	sudo cat /proc/asound/cards > /tmp/debuglogs/alsa_soundcards_kernel
	alsactl -f /tmp/alsactl.state store
	amixer > /tmp/debuglogs/amixer.output
	pactl list sinks > /tmp/debuglogs/pa_soundcards
	pactl list sources > /tmp/debuglogs/pa_sources
        sudo cp -f /tmp/pulseaudio-debug.log /tmp/debuglogs/ >/dev/null 2>&1
        sudo cp -f /tmp/get_default_input /tmp/debuglogs/ >/dev/null 2>&1
        sudo cp -f /tmp/get_default_output /tmp/debuglogs/ >/dev/null 2>&1
        sudo cp -f /tmp/get_inputs /tmp/debuglogs/ >/dev/null 2>&1
        sudo cp -f /tmp/get_outputs /tmp/debuglogs/ >/dev/null 2>&1
        sudo cp -f /tmp/set_mic /tmp/debuglogs/ >/dev/null 2>&1
        sudo cp -f /tmp/set_soundcard /tmp/debuglogs/ >/dev/null 2>&1
	sudo cp -f /tmp/alsactl.state /tmp/debuglogs/ >/dev/null 2>&1
        sudo cp -f /tmp/autoapp_helper_command /tmp/debuglogs/ >/dev/null 2>&1
        sudo cp -f /tmp/return_value /tmp/debuglogs/ >/dev/null 2>&1
        sudo cp -f /etc/timezone /tmp/debuglogs/ >/dev/null 2>&1
        sudo cp -f /etc/pulse/* /tmp/debuglogs/ >/dev/null 2>&1
        sudo cp -f /boot/crankshaft/button_* /tmp/debuglogs/ >/dev/null 2>&1
	sudo cp -f /tmp/dnsmasq.log /tmp/debuglogs/ >/dev/null 2>&1
	sudo /usr/bin/systemd-analyze plot > /tmp/debuglogs/startsequence.svg

	sudo lsusb | cut -d" " -f2,4 | sed 's/://g' |
	while IFS= read -r line
	do
	    bus=$(echo $line | cut -d" " -f1)
	    device=$(echo $line | cut -d" " -f2)
	    FULLDESC=`sudo udevadm info -q all -n /dev/bus/usb/$bus/$device | grep -Ei '(ID_MODEL=|ID_MODEL_ID=|ID_VENDOR=|ID_VENDOR_ID=)' | sed 's/E: //g'`
	    ID_MODEL=`echo $FULLDESC | cut -d" " -f1 | grep ID_MODEL= | cut -d= -f2`
	    ID_MODEL_ID=`echo $FULLDESC | cut -d" " -f2 | grep ID_MODEL_ID= | cut -d= -f2`
	    ID_MODEL_FROM_DATABASE=`sudo udevadm info -q all -n /dev/bus/usb/$bus/$device | grep -Ei '(ID_MODEL_FROM_DATABASE=)' | sed 's/E: //g' | cut -d= -f2`
	    ID_VENDOR=`echo $FULLDESC | cut -d" " -f3 | grep ID_VENDOR= | cut -d= -f2`
	    ID_VENDOR_ID=`echo $FULLDESC | cut -d" " -f4 | grep ID_VENDOR_ID= | cut -d= -f2`
	    ID_VENDOR_FROM_DATABASE=`sudo udevadm info -q all -n /dev/bus/usb/$bus/$device | grep -Ei '(ID_VENDOR_FROM_DATABASE=)' | sed 's/E: //g' | cut -d= -f2`
	    echo "Bus       : "$bus >> /tmp/debuglogs/usbdevices.log
	    echo "Device    : "$device >> /tmp/debuglogs/usbdevices.log
	    echo "Model ID  : "$ID_MODEL_ID >> /tmp/debuglogs/usbdevices.log
	    echo "Vendor ID : "$ID_VENDOR_ID >> /tmp/debuglogs/usbdevices.log
	    echo "Model     : "$ID_MODEL" ("$ID_MODEL_FROM_DATABASE")" >> /tmp/debuglogs/usbdevices.log
	    echo "Vendor    : "$ID_VENDOR" ("$ID_VENDOR_FROM_DATABASE")" >> /tmp/debuglogs/usbdevices.log
	    echo "-------------------------------------------------------------" >> /tmp/debuglogs/usbdevices.log
	done

	cs_echo ""
	cs_echo "Blanking wifi passwords..."
	cs_echo ""
	sudo sed -i 's/WIFI_PSK=.*/WIFI_PSK=xxx cleared xxx/' /tmp/debuglogs/crankshaft_env.sh
	sudo sed -i 's/WIFI2_PSK=.*/WIFI2_PSK=xxx cleared xxx/' /tmp/debuglogs/crankshaft_env.sh
	sudo sed -i 's/HOTSPOT_PSK=.*/HOTSPOT_PSK=xxx cleared xxx/' /tmp/debuglogs/crankshaft_env.sh
	sudo sed -i 's/wpa_passphrase=.*/wpa_passphrase=xxx cleared xxx/' /tmp/debuglogs/hostapd.conf
	sudo sed -i 's/psk=.*/psk=xxx cleared xxx/' /tmp/debuglogs/wpa_supplicant.conf
	if [ "${WIFI_PSK}" != "" ]; then
	    if [ -f /tmp/debuglogs/autoapp_helper_command ]; then
		sudo sed -i 's/'"$WIFI_PSK"'/xxx cleared xxx/' /tmp/debuglogs/autoapp_helper_command
	    fi
	    if [ -f /tmp/debuglogs/return_value ]; then
		sudo sed -i 's/'"$WIFI_PSK"'/xxx cleared xxx/' /tmp/debuglogs/return_value
	    fi
	fi
	if [ ! -z $HOTSPOT_PSK ]; then
	    if [ -f /tmp/debuglogs/autoapp_helper_command ]; then
		sudo sed -i 's/'$HOTSPOT_PSK'/xxx cleared xxx/' /tmp/debuglogs/autoapp_helper_command
	    fi
	    if [ -f /tmp/debuglogs/return_value ]; then
		sudo sed -i 's/'$HOTSPOT_PSK'/xxx cleared xxx/' /tmp/debuglogs/return_value
	    fi
	fi
	sudo systemctl daemon-reload
	sudo systemctl list-units --type=service --no-pager --all | grep 'Crankshaft-CONDOR\|UNIT' | awk {'print $1'} | grep -e '.service' -e '.target' > /tmp/tmp.log
	while read -r line; do
	    sudo systemctl status $line >> /tmp/debuglogs/services-cs-status.log
	    echo "----------------------------------------------------------------------------------------------------" >> /tmp/debuglogs/services-cs-status.log
	    echo "####################################################################################################" >> /tmp/debuglogs/services-cs-status.log
	    echo "----------------------------------------------------------------------------------------------------" >> /tmp/debuglogs/services-cs-status.log
	done < /tmp/tmp.log
	rm /tmp/tmp.log

	sudo systemctl list-units --type=service --no-pager --all | grep -v 'Crankshaft-CONDOR\|UNIT' | awk {'print $1'} | grep -e '.service' -e '.target' > /tmp/tmp.log
	while read -r line; do
	    sudo systemctl status $line >> /tmp/debuglogs/services-non-cs-status.log
	    echo "----------------------------------------------------------------------------------------------------" >> /tmp/debuglogs/services-non-cs-status.log
	    echo "####################################################################################################" >> /tmp/debuglogs/services-non-cs-status.log
	    echo "----------------------------------------------------------------------------------------------------" >> /tmp/debuglogs/services-non-cs-status.log
	done < /tmp/tmp.log
	rm /tmp/tmp.log

	sudo systemctl list-units --state=failed --no-pager --all | grep -e '.service' -e '.target' | awk {'print $2'} > /tmp/tmp.log
	while read -r line; do
	    sudo systemctl status $line >> /tmp/debuglogs/services-failed-status.log
	    echo "----------------------------------------------------------------------------------------------------" >> /tmp/debuglogs/services-failed-status.log
	    echo "####################################################################################################" >> /tmp/debuglogs/services-failed-status.log
	    echo "----------------------------------------------------------------------------------------------------" >> /tmp/debuglogs/services-failed-status.log
	done < /tmp/tmp.log
	rm /tmp/tmp.log

	sudo cp -f /tmp/custombrightness /tmp/debuglogs/ >/dev/null 2>&1

	# check pi display
	if [ -f ${BRIGHTNESS_FILE} ]; then
	    echo "display file present" > /tmp/debuglogs/display.log
	    sudo ls -l -1 ${BRIGHTNESS_FILE} >> /tmp/debuglogs/display.log
	    sudo stat ${BRIGHTNESS_FILE} >> /tmp/debuglogs/display.log
	    echo "" >> /tmp/debuglogs/display.log
	    echo "Current value: $(sudo sudo cat ${BRIGHTNESS_FILE})" >> /tmp/debuglogs/display.log
	fi

	# Modules
	sudo cp -f /etc/modules /tmp/debuglogs/ >/dev/null 2>&1

	# i2c devices
	sudo i2cdetect -y 1 > /tmp/debuglogs/i2c-devices.log

	# RPI Voltage
	cs_pi_power> /tmp/debuglogs/pi-power.log

	# Finish
	sudo chmod 666 /tmp/debuglogs/*
	sudo rm -rf /boot/debug.zip >/dev/null 2>&1
	sudo zip -j /boot/debug.zip /tmp/debuglogs/* >/dev/null 2>&1
	cs_bootro
        sudo rm -rf /tmp/debug_in_progress
        sudo rm -rf /tmp/debuglogs
    fi

    #initramfs
    if [ $1 == "initramfs" ]; then
	case $2 in
	    clean)
		cs_bootrw
		cs_echo "Cleanup initramfs"
                # cleanup
		sudo rm /boot/initrd.img > /dev/null 2>&1
		sudo sed -i '/./,/^$/!d' /boot/config.txt
                sudo sed -i 's/^# Initramfs params for flashsystem//' /boot/config.txt
                sudo sed -i 's/^initramfs initrd.img followkernel//' /boot/config.txt
                sudo sed -i 's/^ramfsfile=initrd.img//' /boot/config.txt
                sudo sed -i 's/^ramfsaddr=-1//' /boot/config.txt
                sudo sed -i 's/rootdelay=10//' /boot/cmdline.txt
                sudo sed -i 's/initrd=-1//' /boot/cmdline.txt
                sudo sed -i 's/splash //' /boot/cmdline.txt
                sudo sed -i 's/vt.global_cursor_default=0 //' /boot/cmdline.txt
                sudo sed -i 's/plymouth.ignore-serial-consoles //' /boot/cmdline.txt
		sudo sed -i 's/ *$//' /boot/cmdline.txt
                sudo sed -i 's/$/ vt.global_cursor_default=0/' /boot/cmdline.txt
                sudo sed -i 's/$/ plymouth.ignore-serial-consoles/' /boot/cmdline.txt
                sudo sed -i 's/$/ splash/' /boot/cmdline.txt
                sudo sed -i '/./,/^$/!d' /boot/config.txt
		cs_bootro
		;;
	    create)
		cs_bootrw
		cs_echo "Creating initramfs"
                # cleanup
		sudo sed -i '/./,/^$/!d' /boot/config.txt
                sudo sed -i 's/^# Initramfs params for flashsystem//' /boot/config.txt
                sudo sed -i 's/^initramfs initrd.img followkernel//' /boot/config.txt
                sudo sed -i 's/^ramfsfile=initrd.img//' /boot/config.txt
                sudo sed -i 's/^ramfsaddr=-1//' /boot/config.txt
                sudo sed -i 's/rootdelay=10//' /boot/cmdline.txt
                sudo sed -i 's/initrd=-1//' /boot/cmdline.txt
                sudo sed -i 's/splash //' /boot/cmdline.txt
                sudo sed -i 's/vt.global_cursor_default=0 //' /boot/cmdline.txt
                sudo sed -i 's/plymouth.ignore-serial-consoles //' /boot/cmdline.txt
                sudo sed -i '/./,/^$/!d' /boot/config.txt
		sudo rm /boot/initrd.img > /dev/null 2>&1
                sudo mkinitramfs -o /boot/initrd.img > /dev/null 2>&1
                # Set entries
                sudo sh -c 'echo "" >> /boot/config.txt'
                sudo sh -c 'echo "# Initramfs params for flashsystem" >> /boot/config.txt'
                sudo sh -c 'echo "initramfs initrd.img followkernel" >> /boot/config.txt'
                sudo sh -c 'echo "ramfsfile=initrd.img" >> /boot/config.txt'
                sudo sh -c 'echo "ramfsaddr=-1" >> /boot/config.txt'
                sudo sed -i 's/$/ rootdelay=10/' /boot/cmdline.txt
                sudo sed -i 's/$/ initrd=-1/' /boot/cmdline.txt
		cs_bootro
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft initramfs clean|create${RESET}"
		;;
	esac
    fi

    #i2c device check
    if [ $1 == "i2ccheck" ]; then
        device=$2
        dline=$(echo $device | cut -c1)
        drow=$(echo $device | cut -c2)
        # replace hex char with correct array field
        if [ "$drow" == "a" ]; then
            drow=10
        fi
        if [ "$drow" == "b" ]; then
            drow=11
        fi
        if [ "$drow" == "c" ]; then
            drow=12
        fi
        if [ "$drow" == "d" ]; then
            drow=13
        fi
        if [ "$drow" == "e" ]; then
            drow=14
        fi
        if [ "$drow" == "f" ]; then
            drow=15
        fi
        counter=0
        i2cdetect -y 1 | tail -n8 | while read line; do
            line=$(echo $line | cut -d: -f2)
            # extend line 0 to fill array correct
            if [ "$counter" == "0" ]; then
                line="-- -- -- $line"
            fi
            IFS=' ' read -r -a array <<< "$line"
            if [ "$dline" == "$counter" ]; then
                if [ "${array[$drow]}" == "$device" ]; then
                    cs_echo "Device 0x$device found."
                    exit 0
                elif [ "${array[$drow]}" == "UU" ]; then
                    cs_echo "Device 0x$device found and in use by another process."
                    exit 0
                else
                    cs_echo "No device found."
                    exit 1
                fi
            fi
            counter=$((counter+1))
        done
    fi

    #network
    if [ $1 == "network" ]; then
	case $2 in
	    0)
		sudo wpa_cli -iwlan0 select_network 0
		cs_echo "Network 0 selected"
		;;
	    1)
		sudo wpa_cli -iwlan0 select_network 1
		cs_echo "Network 1 selected"
		;;
	    auto)
		sudo wpa_cli -iwlan0 enable_network 0
		sudo wpa_cli -iwlan0 enable_network 1
		cs_echo "Network 0 and 1 reenabled for auto select"
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft network 0|1|auto${RESET}"
		;;
	esac
    fi

    
    # background resize
    if [ $1 == "resizebg" ]; then
	width=`cat /sys/class/graphics/fb0/virtual_size | cut -d, -f1`
	heigth=`cat /sys/class/graphics/fb0/virtual_size | cut -d, -f2`
	cs_echo "Screen width: $width"
	cs_echo "Screen heigth: $heigth"
	cs_bootrw
	cs_echo "Resizing background images..."
	sudo convert /boot/crankshaft/wallpaper-night.png -resize ${width}x${heigth}! /boot/crankshaft/wallpaper-night.png
	sudo convert /boot/crankshaft/wallpaper.png -resize ${width}x${heigth}! /boot/crankshaft/wallpaper.png
	sudo convert /boot/crankshaft/wallpaper-classic-night.png -resize ${width}x${heigth}! /boot/crankshaft/wallpaper-classic-night.png
	sudo convert /boot/crankshaft/wallpaper-classic.png -resize ${width}x${heigth}! /boot/crankshaft/wallpaper-classic.png
	sudo convert /boot/crankshaft/wallpaper-eq.png -resize ${width}x${heigth}! /boot/crankshaft/wallpaper-eq.png
	sudo convert /boot/crankshaft/wallpaper-christmas.png -resize ${width}x${heigth}! /boot/crankshaft/wallpaper-christmas.png
	sudo convert /boot/crankshaft/wallpaper-firework.png -resize ${width}x${heigth}! /boot/crankshaft/wallpaper-firework.png
	cs_bootro
    fi

    # cover
    if [ $1 == "cover" ]; then
	case $2 in
	    extract)
		if [ ! -d /media/MYMEDIA/.tmp ]; then
		    sudo mkdir /media/MYMEDIA/.tmp
		fi
		if [ -d /media/USBDRIVES/CSSTORAGE ] && [ ! -d /media/USBDRIVES/CSSTORAGE/COVERCACHE ]; then
		    sudo mkdir /media/USBDRIVES/CSSTORAGE/COVERCACHE
		fi
		sudo sh -c 'echo "" > /tmp/coverextractor.log'
		sudo chmod 666 /tmp/coverextractor.log
		for folder in /media/MYMEDIA/*; do
		    if [ -d "$folder" ]; then
			cd "$folder"
			file=`ls | grep .mp3 | head -n1`
			if [ -f "$file" ]; then
			    cs_noecho "[${CYAN}${BOLD} INFO ${RESET}] Checking: $file"
			    sudo eyeD3 "$file" --write-images /media/MYMEDIA/.tmp >/dev/null 2>&1
			    cover=`ls /media/MYMEDIA/.tmp/ | grep -e .jpg -e .png | tail -n1`
			    if [[ $cover == *"jpg"* ]]; then
				cs_noecho "[${GREEN}${BOLD}  OK  ${RESET}] Match: JPG-Image found!"
				cs_noecho "[${GREEN}${BOLD}  OK  ${RESET}] Destination: /media/USBDRIVES/CSSTORAGE/COVERCACHE/$(basename "$folder").jpg"
				echo "JPG: /media/USBDRIVES/CSSTORAGE/COVERCACHE/$(basename "$folder").jpg" >> /tmp/coverextractor.log
				sudo cp -f "/media/MYMEDIA/.tmp/$(basename $cover)" "/media/USBDRIVES/CSSTORAGE/COVERCACHE/$(basename "$folder").jpg"
			    elif [[ $cover == *"png"* ]]; then
				cs_noecho "[${GREEN}${BOLD}  OK  ${RESET}] Match: PNG-Image found!"
				cs_noecho "[${GREEN}${BOLD}  OK  ${RESET}] Destination: /media/USBDRIVES/CSSTORAGE/COVERCACHE/$(basename "$folder").png"
				echo "PNG: /media/USBDRIVES/CSSTORAGE/COVERCACHE/$(basename "$folder").png" >> /tmp/coverextractor.log
				sudo cp -f "/media/MYMEDIA/.tmp/$(basename $cover)" "/media/USBDRIVES/CSSTORAGE/COVERCACHE/$(basename "$folder").png"
			    else
				cs_noecho "[${RED}${BOLD} INFO ${RESET}] No image found."
				echo "No image in media ($folder/$file)" >> /tmp/coverextractor.log
			    fi
			    sudo rm -rf /media/MYMEDIA/.tmp/*
			    cd ..
			else
			    echo "No matching media in folder found ($folder)" >> /tmp/coverextractor.log
			fi
		    fi
		done
		sudo rmdir /media/MYMEDIA/.tmp
		;;
	    clearall)
		sudo rm -rf /media/USBDRIVES/CSSTORAGE/COVERCACHE/*
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft cover extract|clearall${RESET}"
		;;
	esac
    fi

    
    #version
    if [ $1 == "version" ]; then
	echo "Crankshaft-CONDOR Management Tool v$version"
    fi

    if [[ ! $SHLVL -gt 2 ]] && [ -z $PPIDCHECK ]; then
	cs_echo ""
	cs_echo "Done."
    fi

else
    echo ""
    echo "crankshaft known commands:"
    echo "----------------------------"
    echo ""
    echo "brightness                    Handle Display Backlight"
    echo "         |- min               - Set Display Brightness To Min"
    echo "         |- max               - Set Display Brightness To Max"
    echo "         |- up                - Increase Brightness"
    echo "         |- down              - Decrease Brightness"
    echo "         |- save              - Save Brightness Level"
    echo "         |- restore           - Restore Brightness Level"
    echo "         |- set x             - Set Display Brightness to x"
    echo "         |- get"
    echo "              |- level        - Get Current Brightness Level"
    echo "              |- location     - Get Device Brightness File Location"
    echo ""
    echo "filesystem                    Handle Filesystem"
    echo "         |- boot"
    echo "               |- lock        - Re-Mount /boot As Read Only"
    echo "               |- unlock      - Re-Mount /boot As Read Write"
    echo "               |- check       - Check And Repair Filesystem"
    echo "         |- system"
    echo "                 |- lock      - Re-Mount / As Read Only"
    echo "                 |- unlock    - Re-Mount / As Read Write"
    echo ""
    echo "boot                          Handle Filesystem"
    echo "   |- lock                    - Re-Mount /boot As Read Only"
    echo "   |- unlock                  - Re-Mount /boot As Read Write"
    echo "   |- check                   - Check And Repair Filesystem"
    echo ""
    echo "system                        Handle Filesystem"
    echo "     |- lock                  - Re-Mount / As Read Only"
    echo "     |- unlock                - Re-Mount / As Read Write"
    echo ""
    echo "timers                        Handle Timers"
    echo "     |- status                - List Current Timers"
    echo "     |- start                 - Start All Timers"
    echo "     |- stop                  - Stop All Timers"
    echo "     |- disconnect"
    echo "                 |- start     - Start Timer Disconnect"
    echo "                 |- stop      - Stop Timer Disconnect"
    echo "                 |- set xx    - Set Disconnect Timeout"
    echo "     |- shutdown"
    echo "               |- start       - Start Timer Shutdown"
    echo "               |- stop        - Stop Timer Shutdown"
    echo "               |- set xx      - Set Shutdown Timeout"
    echo "     |- daynight xx xx        - Start hour for day and start hour for night (used to switch gui to day/night)"
    echo ""
    echo "state                          Handle Day/Night (will be overwritten by rtc if enabled)"
    echo "    |- day                    - Set System To Day"
    echo "    |- night                  - Set System To Night"
    echo ""
    echo "settings                      Handle Openauto Settings"
    echo "       |- save                - Save Openauto.ini"
    echo "       |- retore              - Restore Openauto.ini"
    echo ""
    echo "services                      Handle Systemd Services"
    echo "       |- reset               - Re-Init Default Boot State Of Services"
    echo "       |- status              - List State Of Crankshaft-CONDOR Services"
    echo "       |- failed              - List failed services"
    echo ""
    echo "rtc                           Handle Real Time Clock"
    echo "  |- abx80x"
    echo "  |- ds1307"
    echo "  |- ds1339"
    echo "  |- mcp7940x"
    echo "  |- mcp7941x"
    echo "  |- ds3231                   - Type of RTC" 
    echo "  |- pcf2127"
    echo "  |- pcf8523"
    echo "  |- pcf8563"
    echo "  |- sync                     - Sync timeserver to system time to rtc"
    echo "  |- status                   - Show current status of clock's"
    echo "  |- disable"
    echo ""
    echo "timezone xx                   Set timezone (xx=Europe/London for example)"
    echo ""
    echo "reset                         Handle Resets"
    echo "    |- config.txt             - Reset config.txt to defaults - Danger!!!"
    echo "                                Custom settings will be dropped but script tries"
    echo "                                to safe custom display and power settings:"
    echo "                                - current_limit_override="
    echo "                                - max_usb_current="
    echo "                                - avoid_warnings="
    echo ""
    echo "resize                        Resize root partition and filesystem on sdcard"
    echo ""
    echo "usb                           Handle USB drives"
    echo "  |- list                     - List available usb mass storage drives"
    echo "  |- mount x                  - Mount partition from given usb device (sda(x),sdb(x),sdc(x),...)"
    echo "  |- umount x                 - Unmount mounted usb partition (sda(x),sdb(x),sdc(x),...)"
    echo "  |- identify                 - Give us id's, manufacturer & model of connected usb devices"
    echo ""
    echo "hotspot                       Hotspot related stuff"
    echo "  |- status                   - List connected clients"
    echo ""
    echo "bluetooth                     Bluetooth realted stuff"
    echo "        |- save               - Save paired bluetooth devices"
    echo "        |- restore            - Restore paired bluetooth devices"
    echo "        |- status             - Show status of paired devices"
    echo "        |- unpair             - Unpair all paired devices"
    echo "        |- pairable           - Set controller to pairable state for 120 seconds"
    echo "        |- builtin            - Enable builtin bluetooth support"
    echo "        |- external           - Disable builtin bluetooth support to use external adapter"
    echo "        |- disable            - Disable builtin bluetooth support to use external adapter"
    echo ""
    echo "syslog                        Show os syslog"
    echo ""
    echo "oalog                         Show openauto log"
    echo ""
    echo "mode                          Set system mode"
    echo "   |- default                 - Enable default system mode"
    echo "   |- dev                     - Enable dev system mode"
    echo "   |- devapp                  - Enable dev system mode with app"
    echo "   |- debug                   - Enable debug system mode"
    echo ""
    echo "update                        Handle Updates"
    echo "     |- udev                  - Check And Update udev Rules For Device Detection"
    echo "     |- csmt                  - Check And Update Crankshaft-CONDOR Management Tool"
    echo "     |- openauto              - Check And Update openauto/helper - Warning: only use if requested by support!"
    echo "     |- check                 - Check for new versions"
    echo "     |- cancel                - Cancel in progress image download"
    echo ""
    echo "debuglog                      Create debug log for support requests"
    echo ""
    echo "initramfs                     Handle initramfs"
    echo "    |- clean                  - Remove initramfs entries"
    echo "    |- create                 - Create initramfs and setup"
    echo ""
    echo "temp                          Show current system temp"
    echo ""
    echo "i2ccheck xx                   Check if i2c device is present"
    echo "                              xx = address (0x68 = 68 for xx)"
    echo ""
    echo "network x                     Force using wifi config 0|1|auto for wpa_supplicant"
    echo ""
    echo "resizebg                      Convert background images to screen matching size"
    echo ""
    echo "systemcheck                   Check general system setup params (currently work in progress)"
    echo ""
    echo "version                       Show Vesion Of CSMT"
fi

exit 0
